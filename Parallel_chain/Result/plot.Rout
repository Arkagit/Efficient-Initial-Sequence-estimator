
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(100)
> 
> source("../Asymp_var.R")
> source("../VAR_func.R")
> source("../global_var.R")
> source("../Stan_code.R")
> 
> 
> load("parallel_est.Rdata")
> 
> ############################################
> ################## ESS #####################
> 
> 
> ess_true <- (det(true.sig.gen(p = p, omega = omega, phi = phi)$tar.var)/det(true.sig.gen(p = p, omega = omega, phi = phi)$final.cov))^(1/p)
> ess_true
[1] 0.02630116
> 
> 
> ess_track_glob = array(0, dim = c(B, length(subsize), length(M)))
> ess_track_stan = array(0, dim = c(B, length(subsize), length(M)))
> 
> for(i in 1:B){
+   for(j in 1:length(subsize)){
+     for(k in 1:length(M)){
+       ess_track_glob[i,j,k] = (det(Estimate[[i]][[j]][[3]][[k]])/det(Estimate[[i]][[j]][[1]][[k]]))^(1/p)
+       ess_track_stan[i,j,k] = (det(Estimate[[i]][[j]][[3]][[k]])/det(Estimate[[i]][[j]][[2]][[k]]))^(1/p)
+     }
+   }
+ }
> 
> 
> 
> mean_ess_glob = numeric(0)
> mean_ess_stan = numeric(0)
> 
> sd_ess_glob = numeric(0)
> sd_ess_stan = numeric(0)
> 
> for(i in 1:length(M)){
+ 	mean_ess_glob[i] = mean(ess_track_glob[,7,i])
+ 	sd_ess_glob[i] = sd(ess_track_glob[,7,i])
+ 	mean_ess_stan[i] = mean(ess_track_stan[,7,i])
+ 	sd_ess_stan[i] = sd(ess_track_stan[,7,i])
+ 
+ }
> 
> 
> final_mat_ess = matrix(c(mean_ess_glob, mean_ess_stan), byrow = TRUE, nrow = 2)
> rownames(final_mat_ess) = c("Globally Centered", "STAN")
> colnames(final_mat_ess) = c("M = 2", "M = 4", "M = 8", "M = 16")
> final_mat_ess
                       M = 2      M = 4      M = 8     M = 16
Globally Centered 0.02265967 0.02229680 0.02205609 0.02200571
STAN              0.02151090 0.02198808 0.02186404 0.02220580
> 
> sd_mat_ess = matrix(c(sd_ess_glob, sd_ess_stan), byrow = TRUE, nrow = 2)
> rownames(sd_mat_ess) = c("Globally Centered", "STAN")
> colnames(sd_mat_ess) = c("M = 2", "M = 4", "M = 8", "M = 16")
> sd_mat_ess
                        M = 2       M = 4       M = 8      M = 16
Globally Centered 0.003492289 0.003577899 0.003669439 0.003660229
STAN              0.003857387 0.003521601 0.003514001 0.003409186
> 
> 
> ############################################
> ################## Frob #####################
> 
> Truth = true.sig.gen(p = p, omega = omega, phi = phi)$final.cov
> 
> frob_track_glob = array(0, dim = c(B, length(subsize), length(M)))
> frob_track_stan = array(0, dim = c(B, length(subsize), length(M)))
> 
> for(i in 1:B){
+   for(j in 1:length(subsize)){
+     for(k in 1:length(M)){
+       frob_track_glob[i,j,k] = norm(Truth - Estimate[[i]][[j]][[1]][[k]], type = "F")
+       frob_track_stan[i,j,k] = norm(Truth - Estimate[[i]][[j]][[2]][[k]], type = "F")
+     }
+   }
+ }
> 
> 
> 
> mean_frob_glob = numeric(0)
> mean_frob_stan = numeric(0)
> 
> sd_frob_glob = numeric(0)
> sd_frob_stan = numeric(0)
> 
> for(i in 1:length(M)){
+ 	mean_frob_glob[i] = mean(frob_track_glob[,7,i])
+ 	sd_frob_glob[i] = sd(frob_track_glob[,7,i])
+ 	mean_frob_stan[i] = mean(frob_track_stan[,7,i])
+ 	sd_frob_stan[i] = sd(frob_track_stan[,7,i])
+ 
+ }
> 
> 
> final_mat_frob = matrix(c(mean_frob_glob, mean_frob_stan), byrow = TRUE, nrow = 2)
> rownames(final_mat_frob) = c("Globally Centered", "STAN")
> colnames(final_mat_frob) = c("M = 2", "M = 4", "M = 8", "M = 16")
> final_mat_frob
                     M = 2    M = 4    M = 8   M = 16
Globally Centered 4497.988 4532.994 4643.732 4644.479
STAN              4316.634 3178.044 2670.203 2468.445
> 
> sd_mat_frob = matrix(c(sd_frob_glob, sd_frob_stan), byrow = TRUE, nrow = 2)
> rownames(sd_mat_frob) = c("Globally Centered", "STAN")
> colnames(sd_mat_frob) = c("M = 2", "M = 4", "M = 8", "M = 16")
> sd_mat_frob
                     M = 2     M = 4     M = 8    M = 16
Globally Centered 2476.027 2379.9412 2509.6387 2485.7962
STAN              3591.920  960.5156  850.1426  870.1972
> 
> proc.time()
   user  system elapsed 
  0.570   0.063   0.619 
