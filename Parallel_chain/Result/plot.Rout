WARNING: unknown option '-vanilla'


R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> set.seed(100)
> 
> source("../Asymp_var.R")
> source("../VAR_func.R")
> source("../global_var.R")
> source("../Stan_code.R")
> 
> 
> load("parallel_est.Rdata")
> 
> ############################################
> ################## ESS #####################
> 
> 
> ess_true <- (det(true.sig.gen(p = p, omega = omega, phi = phi)$tar.var)/det(true.sig.gen(p = p, omega = omega, phi = phi)$final.cov))^(1/p)
> ess_true
[1] 0.02630116
> 
> 
> ess_track_glob = array(0, dim = c(B, length(subsize), length(M)))
> ess_track_stan = array(0, dim = c(B, length(subsize), length(M)))
> 
> for(i in 1:B){
+   for(j in 1:length(subsize)){
+     for(k in 1:length(M)){
+       ess_track_glob[i,j,k] = (det(Estimate[[i]][[j]][[3]][[k]])/det(Estimate[[i]][[j]][[1]][[k]]))^(1/p)
+       ess_track_stan[i,j,k] = (det(Estimate[[i]][[j]][[3]][[k]])/det(Estimate[[i]][[j]][[2]][[k]]))^(1/p)
+     }
+   }
+ }
> 
> 
> 
> mean_ess_glob = numeric(0)
> mean_ess_stan = numeric(0)
> 
> sd_ess_glob = numeric(0)
> sd_ess_stan = numeric(0)
> 
> for(i in 1:length(M)){
+ 	mean_ess_glob[i] = mean(ess_track_glob[,7,i])
+ 	sd_ess_glob[i] = sd(ess_track_glob[,7,i])
+ 	mean_ess_stan[i] = mean(ess_track_stan[,7,i])
+ 	sd_ess_stan[i] = sd(ess_track_stan[,7,i])
+ 
+ }
> 
> 
> final_mat_ess = matrix(c(mean_ess_glob, mean_ess_stan), byrow = TRUE, nrow = 2)
> rownames(final_mat_ess) = c("Globally Centered", "STAN")
> colnames(final_mat_ess) = c("M = 2", "M = 4", "M = 8", "M = 16")
> final_mat_ess
                       M = 2      M = 4      M = 8     M = 16
Globally Centered 0.02144714 0.02050655 0.02005269 0.01965607
STAN              0.02058669 0.02024842 0.01998021 0.01969516
> 
> sd_mat_ess = matrix(c(sd_ess_glob, sd_ess_stan), byrow = TRUE, nrow = 2)
> rownames(sd_mat_ess) = c("Globally Centered", "STAN")
> colnames(sd_mat_ess) = c("M = 2", "M = 4", "M = 8", "M = 16")
> sd_mat_ess
                        M = 2       M = 4       M = 8      M = 16
Globally Centered 0.002849268 0.001859485 0.001301275 0.001015722
STAN              0.003461575 0.002097743 0.001402937 0.001079350
> 
> 
> ############################################
> ################## Frob #####################
> 
> Truth = true.sig.gen(p = p, omega = omega, phi = phi)$final.cov
> 
> frob_track_glob = array(0, dim = c(B, length(subsize), length(M)))
> frob_track_stan = array(0, dim = c(B, length(subsize), length(M)))
> 
> for(i in 1:B){
+   for(j in 1:length(subsize)){
+     for(k in 1:length(M)){
+       frob_track_glob[i,j,k] = norm(Truth - Estimate[[i]][[j]][[1]][[k]], type = "F")/norm(Truth, type = "F")
+       frob_track_stan[i,j,k] = norm(Truth - Estimate[[i]][[j]][[2]][[k]], type = "F")/norm(Truth, type = "F")
+     }
+   }
+ }
> 
> 
> 
> mean_frob_glob = numeric(0)
> mean_frob_stan = numeric(0)
> 
> sd_frob_glob = numeric(0)
> sd_frob_stan = numeric(0)
> 
> for(i in 1:length(M)){
+ 	mean_frob_glob[i] = mean(frob_track_glob[,7,i])
+ 	sd_frob_glob[i] = sd(frob_track_glob[,7,i])
+ 	mean_frob_stan[i] = mean(frob_track_stan[,7,i])
+ 	sd_frob_stan[i] = sd(frob_track_stan[,7,i])
+ 
+ }
> 
> 
> final_mat_frob = matrix(c(mean_frob_glob, mean_frob_stan), byrow = TRUE, nrow = 2)
> rownames(final_mat_frob) = c("Globally Centered", "STAN")
> colnames(final_mat_frob) = c("M = 2", "M = 4", "M = 8", "M = 16")
> final_mat_frob
                      M = 2     M = 4     M = 8    M = 16
Globally Centered 0.3157162 0.2462278 0.2081236 0.1811672
STAN              0.4285446 0.2575788 0.2116472 0.1843403
> 
> sd_mat_frob = matrix(c(sd_frob_glob, sd_frob_stan), byrow = TRUE, nrow = 2)
> rownames(sd_mat_frob) = c("Globally Centered", "STAN")
> colnames(sd_mat_frob) = c("M = 2", "M = 4", "M = 8", "M = 16")
> sd_mat_frob
                      M = 2      M = 4      M = 8     M = 16
Globally Centered 0.1209234 0.07830670 0.05907089 0.04412750
STAN              0.6479505 0.08375198 0.05911194 0.04438678
> 
> #################### boxplot ##############
> 
> boxplot(frob_track_glob[,7,i])
> 
> plot(frob_track_glob[,7,i])
> 
> df = data.frame(
+   id = c(rep("global", B), rep("stan", B)),
+   "2" = c(frob_track_glob[,7,1], frob_track_stan[,7,1]),
+   "4" = c(frob_track_glob[,7,2], frob_track_stan[,7,2]),
+   "8" = c(frob_track_glob[,7,3], frob_track_stan[,7,3]),
+   "16" = c(frob_track_glob[,7,4], frob_track_stan[,7,4]))
> 
> 
> pdf("Boxplot.pdf", height = 6, width = 6)
> par(mar = c(5.1, 4.8, 4.1, 2.1))
> 
> boxplot(df[,-1], boxfill = NA, border = NA, names = M, xlab = "Number of parallel chains", 
+   ylab = "Relative Frobenius Norm", ylim = c(0, 1)) #invisible boxes - only axes and plot area
> boxplot(df[df$id=="global", -1], xaxt = "n", add = TRUE, boxfill="cadetblue1", 
+   boxwex=0.25, at = 1:ncol(df[,-1]) - 0.15) #shift these left by -0.15
> boxplot(df[df$id=="stan", -1], xaxt = "n", add = TRUE, boxfill="firebrick1", 
+   boxwex=0.25, at = 1:ncol(df[,-1]) + 0.15) #shift to the right by +0.15
> legend("topright", legend = c("Globally Centered", "STAN"), 
+        fill = c("cadetblue1", "firebrick1"), border = "black")
> dev.off()
pdf 
  2 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  0.654   0.071   0.711 
