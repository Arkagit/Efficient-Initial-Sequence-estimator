WARNING: unknown option '-vanilla'


R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> set.seed(112)
> 
> source("../Asymp_var.R")
> source("../VAR_func.R")
> source("../global_var.R")
> source("../Stan_code.R")
> 
> library(foreach)
> library(doParallel)
Loading required package: iterators

Attaching package: ‘iterators’

The following object is masked from ‘package:HadamardR’:

    nextElem

Loading required package: parallel
> 
> 
> B = 100
> 
> M = c(2, 4, 8, 16)
> 
> subsize <- c(5e2, 8e2, 1e3, 3e3, 5e4, 8e3, 1e4)
> 
> N = max(subsize)
> 
> #chain_val = 1
> 
> true_var = true.sig.gen(p, omega, phi)$final.cov
> 
> parallel::detectCores()
[1] 64
> n.cores <- 50
> doParallel::registerDoParallel(cores = n.cores)
> 
> Estimate = list()
> 
> Estimate = foreach(b = 1:B, .packages = c("mcmcse"))%dopar%{
+ #for(b in 1:B){
+ 	data = list()
+ 	for(i in 1:max(M)){
+ 		data = append(data, list(var1(p = p, phi = phi, nsim = N, omega = omega)))
+ 	}
+ 
+ 	result = list()
+ 
+ 	print(4*b+1)
+ 
+ 	for(s in 1:length(subsize)){
+ 		result[[s]] = list()
+ 		Sigma_global = list()
+ 		Sigma_stan = list()
+ 		Gamma = list()
+ 
+ 		for(u in 1:length(M)){
+ 			minichain = list()
+ 			for(v in 1:M[u]){
+ 				minichain[[v]] = data[[v]][1:subsize[s],]
+ 			}
+ 			print(4*b+2)
+ 
+ 			Sigma_global[[u]] = parallel_sig(par_chain = minichain, M = M[u], ch_l = subsize[s])
+ 			#Sigma_global[[u]] = norm(true_var - parallel_sig(par_chain = minichain, M = M[u], ch_l = subsize[s], chain_val = chain_val), type = "F")
+ 			print(4*b + 3)
+ 			Sigma_stan[[u]] = parallel_stan_sig(minichain, M[u], subsize[s])
+ 			#Sigma_stan[[u]] = norm(true_var - parallel_stan_sig(minichain, M[u], subsize[s]), type = "F")
+ 			Gamma[[u]] = Gamma0(minichain, M[u])
+ 		}
+ 		result[[s]] = list(Sigma_global, Sigma_stan, Gamma)
+ 	}
+ 	result
+ }
[1] 53
[1] 54
[1] 33
[1] 34
[1] 61
[1] 62
[1] 25
[1] 26
[1] 5
[1] 6
[1] 49
[1] 50
[1] 9
[1] 10
[1] 13
[1] 14
[1] 21
[1] 22
[1] 17
[1] 18
[1] 69
[1] 70
[1] 117
[1] 118
[1] 129
[1] 130
[1] 101
[1] 102
[1] 181
[1] 182
[1] 121
[1] 122
[1] 57
[1] 58
[1] 37
[1] 38
[1] 73
[1] 74
[1] 65
[1] 66
[1] 77
[1] 78
[1] 81
[1] 82
[1] 29
[1] 30
[1] 41
[1] 42
[1] 85
[1] 86
[1] 93
[1] 94
[1] 97
[1] 98
[1] 45
[1] 46
[1] 89
[1] 90
[1] 109
[1] 110
[1] 105
[1] 106
[1] 113
[1] 114
[1] 125
[1] 126
[1] 141
[1] 142
[1] 133
[1] 134
[1] 149
[1] 150
[1] 137
[1] 138
[1] 153
[1] 154
[1] 185
[1] 186
[1] 157
[1] 158
[1] 161
[1] 162
[1] 165
[1] 166
[1] 145
[1] 146
[1] 177
[1] 173
[1] 178
[1] 174
[1] 169
[1] 170
[1] 197
[1] 198
[1] 201
[1] 202
[1] 193
[1] 194
[1] 189
[1] 190
[1] 253
[1] 254
[1] 233
[1] 234
[1] 261
[1] 262
[1] 225
[1] 226
[1] 205
[1] 206
[1] 249
[1] 250
[1] 221
[1] 222
[1] 269
[1] 270
[1] 217
[1] 218
[1] 317
[1] 318
[1] 329
[1] 330
[1] 301
[1] 302
[1] 209
[1] 210
[1] 213
[1] 214
[1] 381
[1] 382
[1] 321
[1] 322
[1] 277
[1] 278
[1] 257
[1] 258
[1] 241
[1] 242
[1] 397
[1] 398
[1] 281
[1] 282
[1] 349
[1] 350
[1] 273
[1] 274
[1] 337
[1] 338
[1] 265
[1] 266
[1] 401
[1] 402
[1] 285
[1] 286
[1] 325
[1] 326
[1] 385
[1] 386
[1] 357
[1] 358
[1] 393
[1] 394
[1] 245
[1] 246
[1] 293
[1] 294
[1] 389
[1] 390
[1] 333
[1] 334
[1] 377
[1] 378
[1] 373
[1] 374
[1] 289
[1] 290
[1] 297
[1] 298
[1] 369
[1] 370
[1] 361
[1] 362
[1] 237
[1] 238
[1] 313
[1] 314
[1] 305
[1] 306
[1] 353
[1] 354
[1] 365
[1] 366
[1] 309
[1] 310
[1] 345
[1] 346
[1] 229
[1] 230
[1] 341
[1] 342
Error in { : task 1 failed - "subscript out of bounds"
Calls: %dopar% -> <Anonymous>
Execution halted
