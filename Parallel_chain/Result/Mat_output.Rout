WARNING: unknown option '-vanilla'


R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> set.seed(112)
> 
> source("../Asymp_var.R")
> source("../VAR_func.R")
> source("../global_var.R")
> source("../Stan_code.R")
> 
> library(foreach)
> library(doParallel)
Loading required package: iterators

Attaching package: ‘iterators’

The following object is masked from ‘package:HadamardR’:

    nextElem

Loading required package: parallel
> 
> 
> B = 100
> 
> M = c(2, 4, 8, 16)
> 
> subsize <- c(1e4, 1e5)
> 
> N = max(subsize)
> 
> #chain_val = 1
> 
> true_var = true.sig.gen(p, omega, phi)$final.cov
> 
> parallel::detectCores()
[1] 64
> n.cores <- 50
> doParallel::registerDoParallel(cores = n.cores)
> 
> Estimate = list()
> 
> Estimate = foreach(b = 1:B, .packages = c("mcmcse"))%dopar%{
+ #for(b in 1:B){
+ 	data = list()
+ 	for(i in 1:max(M)){
+ 		data = append(data, list(var1(p = p, phi = phi, nsim = N, omega = omega)))
+ 	}
+ 
+ 	result = list()
+ 
+ 	print(4*b+1)
+ 
+ 	for(s in 1:length(subsize)){
+ 		result[[s]] = list()
+ 		Sigma_global = list()
+ 		Sigma_stan = list()
+ 		Gamma = list()
+ 
+ 		for(u in 1:length(M)){
+ 			minichain = list()
+ 			for(v in 1:M[u]){
+ 				minichain[[v]] = data[[v]][1:subsize[s],]
+ 			}
+ 			print(4*b+2)
+ 
+ 			Sigma_global[[u]] = parallel_sig(par_chain = minichain, M = M[u], ch_l = subsize[s])
+ 			#Sigma_global[[u]] = norm(true_var - parallel_sig(par_chain = minichain, M = M[u], ch_l = subsize[s], chain_val = chain_val), type = "F")
+ 			print(4*b + 3)
+ 			Sigma_stan[[u]] = parallel_stan_sig(minichain, M[u], subsize[s])
+ 			#Sigma_stan[[u]] = norm(true_var - parallel_stan_sig(minichain, M[u], subsize[s]), type = "F")
+ 			Gamma[[u]] = Gamma0(minichain, M[u])
+ 		}
+ 		result[[s]] = list(Sigma_global, Sigma_stan, Gamma)
+ 	}
+ 	result
+ }
[1] 69
[1] 61
[1] 70
[1] 25
[1] 62
[1] 26
[1] 17
[1] 18
[1] 49
[1] 5
[1] 50
[1] 6
[1] 53
[1] 54
[1] 129
[1] 130
[1] 9
[1] 10
[1] 125
[1] 126
[1] 201
[1] 202
[1] 13
[1] 14
[1] 29
[1] 30
[1] 63
[1] 71
[1] 27
[1] 19
[1] 51
[1] 7
[1] 55
[1] 131
[1] 11
[1] 127
[1] 117
[1] 118
[1] 165
[1] 166
[1] 109
[1] 110
[1] 203
[1] 15
[1] 62
[1] 70
[1] 26
[1] 50
[1] 18
[1] 54
[1] 6
[1] 126
[1] 10
[1] 119
[1] 167
[1] 202
[1] 14
[1] 57
[1] 58
[1] 130
[1] 21
[1] 22
[1] 31
[1] 45
[1] 46
[1] 101
[1] 102
[1] 37
[1] 38
[1] 65
[1] 66
[1] 41
[1] 42
[1] 85
[1] 33
[1] 86
[1] 34
[1] 73
[1] 97
[1] 74
[1] 98
[1] 77
[1] 78
[1] 133
[1] 81
[1] 134
[1] 82
[1] 149
[1] 89
[1] 150
[1] 90
[1] 157
[1] 158
[1] 105
[1] 197
[1] 106
[1] 198
[1] 121
[1] 122
[1] 113
[1] 141
[1] 114
[1] 173
[1] 142
[1] 174
[1] 181
[1] 182
[1] 161
[1] 162
[1][1] 145
 137
[1] 138
[1] 146
[1] 153
[1] 154
[1] 177
[1] 178
[1] 193
[1] 169
[1] 194
[1] 170
[1] 185
[1] 186
[1] 111
[1] 118
[1] 166
[1] 59
[1] 93
[1] 94
[1] 189
[1] 190
[1] 63
[1] 71
[1] 27
[1] 55
[1] 51
[1] 19
[1] 127
[1] 7
[1] 11
[1] 203
[1] 15
[1] 58
[1] 23
[1] 30
[1] 47
[1] 103
[1] 39
[1] 67
[1] 43
[1] 87
[1] 35
[1] 75
[1] 99
[1] 83
[1] 79
[1] 91
[1] 151
[1] 135
[1] 107
[1] 159
[1] 199
[1] 123
[1] 115
[1] 143
[1] 175
[1] 163
[1] 183
[1] 139
[1] 147
[1] 155
[1] 179
[1] 171
[1] 195
[1] 187
[1] 110
[1] 119
[1] 167
[1] 95
[1] 191
[1] 70
[1] 26
[1] 50
[1] 54
[1] 18
[1] 126
[1] 6
[1] 10
[1] 202
[1] 14
[1] 59
[1] 131
[1][1] 94
 22
[1] 62
[1] 46
[1] 102
[1] 38
[1] 66
[1] 42
[1] 86
[1] 34
[1] 74
[1] 98
[1] 78
[1] 82
[1] 90
[1] 150
[1] 134
[1] 106
[1][1] 198
 158
[1] 122
[1] 114
[1] 142
[1] 174
[1] 162
[1] 182
[1] 138
[1] 146
[1] 154
[1] 178
[1] 170
[1] 194
[1] 186
[1] 118
[1] 166
[1] 190
[1] 58
[1] 95
[1] 31
[1] 111
[1] 71
[1] 51
[1] 55
[1] 27
[1] 19
[1] 127
[1] 7
[1] 11
[1] 203
[1] 15
[1] 130
[1] 23
[1] 94
[1] 47
[1] 39
[1] 103
[1] 43
[1] 87
[1] 67
[1] 35
[1] 99
[1] 83
[1] 75
[1] 151
[1] 91
[1] 79
[1] 135
[1] 107
[1] 199
[1] 159
[1] 115
[1] 163
[1] 143
[1] 175
[1] 183
[1] 123
[1] 147
[1] 179
[1] 155
[1] 171
[1] 139
[1] 187
[1] 195
[1] 119
[1] 167
[1] 191
[1] 59
[1] 30
[1] 110
[1] 70
[1] 50
[1] 54
[1] 126
[1] 26
[1] 18
[1] 6
[1] 10
[1] 202
[1] 14
[1] 63
[1] 22
[1] 46
[1] 102
[1] 38
[1] 42
[1] 86
[1] 34
[1] 66
[1] 98
[1] 150
[1] 95
[1] 82
[1] 74
[1] 90
[1] 78
[1] 134
[1] 198
[1] 158
[1] 106
[1] 162
[1] 114
[1] 142
[1] 182
[1] 174
[1] 122
[1] 178
[1] 146
[1] 154
[1] 170
[1] 138
[1] 186
[1] 194
[1] 118
[1] 166
[1] 190
[1] 58
[1] 131
[1] 94
[1] 31
[1] 111
[1] 71
[1] 23
[1] 51
[1] 55
[1] 127
[1] 27
[1] 19
[1] 62
[1] 7
[1] 11
[1] 15
[1] 203
[1] 103
[1] 39
[1] 43
[1] 87
[1] 47
[1] 151
[1] 35
[1] 79
[1] 135
[1] 199
[1] 99
[1] 159
[1] 83
[1] 67
[1] 75
[1] 91
[1] 143
[1] 183
[1] 163
[1] 107
[1] 175
[1] 115
[1] 179
[1] 155
[1] 171
[1] 147
[1] 187
[1] 123
[1] 139
[1] 195
[1] 119
[1] 167
[1] 191
[1] 59
[1] 130
[1] 95
[1] 30
[1] 110
[1] 22
[1] 102
[1] 42
[1] 86
[1] 38
[1] 46
[1] 150
[1] 70
[1] 34
[1] 158
[1] 78
[1] 198
[1] 134
[1] 54
[1] 50
[1] 142
[1] 126
[1] 98
[1] 182
[1] 74
[1] 174
[1] 82
[1] 66
[1] 90
[1] 18
[1] 26
[1] 162
[1] 178
[1] 114
[1] 6
[1] 106
[1] 170
[1] 154
[1] 146
[1] 186
[1] 10
[1] 194
[1] 14
[1] 138
[1] 122
[1] 202
[1] 190
[1] 118
[1] 166
[1] 58
[1] 94
[1] 63
[1] 131
[1] 31
[1] 111
[1] 23
[1] 103
[1] 43
[1] 47
[1] 87
[1] 39
[1] 159
[1] 199
[1] 35
[1] 151
[1] 79
[1] 183
[1] 135
[1] 175
[1] 143
[1] 99
[1] 91
[1] 75
[1] 163
[1] 67
[1] 115
[1] 171
[1] 187
[1] 83
[1] 195
[1] 147
[1] 179
[1] 107
[1] 155
[1] 139
[1] 123
[1] 191
[1] 62
[1] 130
[1] 30
[1] 110
[1] 22
[1] 102
[1] 86
[1] 46
[1] 158
[1] 42
[1] 38
[1] 198
[1] 34
[1] 78
[1] 182
[1] 150
[1] 134
[1] 174
[1] 142
[1] 98
[1] 74
[1] 114
[1] 90
[1] 162
[1] 66
[1] 170
[1] 186
[1] 194
[1] 146
[1] 82
[1] 178
[1] 154
[1] 106
[1] 138
[1] 122
[1] 190
[1] 55
[1] 127
[1] 27
[1] 71
[1] 15
[1] 51
[1] 19
[1] 203
[1] 7
[1] 11
[1] 119
[1] 167
[1] 59
[1] 95
[1] 54
[1] 126
[1] 50
[1] 14
[1] 70
[1] 118
[1] 26
[1] 202
[1] 18
[1] 166
[1] 6
[1] 10
[1] 58
[1] 94
[1] 63
[1] 131
[1] 31
[1] 111
[1] 159
[1] 43
[1] 87
[1] 183
[1] 79
[1] 151
[1] 39
[1] 103
[1] 47
[1] 143
[1] 199
[1] 175
[1] 135
[1] 35
[1] 191
[1] 23
[1] 91
[1] 115
[1] 75
[1] 171
[1] 179
[1] 147
[1] 83
[1] 107
[1] 187
[1] 155
[1] 67
[1] 99
[1] 195
[1] 163
[1] 139
[1] 123
[1] 55
[1] 127
[1] 15
[1] 51
[1] 119
[1] 203
[1] 71
[1] 27
[1] 167
[1] 19
[1] 7
[1] 11
[1] 59
[1] 95
[1] 62
[1] 30
[1] 130
[1] 110
[1] 158
[1] 86
[1] 46
[1] 182
[1] 78
[1] 42
[1] 142
[1] 174
[1] 134
[1] 34
[1] 38
[1] 150
[1] 102
[1] 198
[1] 190
[1] 90
[1] 170
[1] 74
[1] 114
[1] 178
[1] 106
[1] 186
[1] 82
[1] 66
[1] 154
[1] 146
[1] 22
[1] 194
[1] 98
[1] 138
[1] 122
[1] 162
[1] 54
[1] 126
[1] 118
[1] 50
[1] 14
[1] 70
[1] 202
[1] 166
[1] 26
[1] 18
[1] 6
[1] 10
[1] 94
[1] 58
[1] 63
[1] 31
[1] 79
[1] 143
[1] 159
[1] 87
[1] 183
[1] 43
[1] 47
[1] 175
[1] 35
[1] 111
[1] 151
[1] 135
[1] 39
[1] 103
[1] 199
[1] 191
[1] 131
[1] 91
[1] 75
[1] 187
[1] 171
[1] 115
[1] 107
[1] 155
[1] 179
[1] 147
[1] 83
[1] 99
[1] 67
[1] 163
[1] 195
[1] 23
[1] 139
[1] 123
[1] 55
[1] 119
[1] 127
[1] 51
[1] 15
[1] 71
[1] 167
[1] 203
[1] 95
[1] 27
[1] 19
[1] 7
[1] 11
[1] 59
[1] 62
[1] 30
[1] 158
[1] 78
[1] 142
[1] 86
[1] 42
[1] 182
[1] 46
[1] 174
[1] 34
[1] 134
[1] 102
[1] 198
[1] 150
[1] 38
[1] 110
[1] 190
[1] 130
[1] 74
[1] 90
[1] 186
[1] 170
[1] 106
[1] 178
[1] 154
[1] 82
[1] 146
[1] 114
[1] 194
[1] 66
[1] 162
[1] 138
[1] 122
[1] 98
[1] 22
[1] 54
[1] 14
[1] 126
[1] 50
[1] 118
[1] 70
[1] 166
[1] 94
[1] 202
[1] 26
[1] 18
[1] 6
[1] 10
[1] 58
[1] 187
[1] 67
[1] 83
[1] 195
[1] 55
[1] 71
[1] 127
[1] 119
[1] 51
[1] 167
[1] 95
[1] 203
[1] 19
[1] 59
[1] 11
[1] 63
[1] 159
[1] 143
[1] 79
[1] 43
[1] 87
[1] 183
[1] 47
[1] 175
[1] 35
[1] 135
[1] 31
[1] 151
[1] 39
[1] 199
[1] 103
[1] 191
[1] 111
[1] 179
[1] 131
[1] 171
[1] 91
[1] 75
[1] 147
[1] 155
[1] 115
[1] 107
[1] 139
[1] 99
[1] 163
[1] 123
[1] 23
[1] 27
[1] 66
[1] 82
[1] 186
[1] 7
[1] 154
[1] 15
[1] 106
[1] 146
[1] 74
[1] 194
[1] 178
[1] 130
[1] 162
[1] 253
[1] 254
[1] 325
[1] 326
[1] 317
[1] 318
[1] 249
[1] 250
[1] 269
[1] 270
[1] 365
[1] 366
[1] 327
[1] 319
[1] 251
[1] 271
[1] 367
[1] 255
[1] 293
[1] 294
[1] 326
[1] 318
[1] 250
[1] 270
[1] 366
[1] 295
[1] 254
[1] 294
[1] 327
[1] 319
[1] 251
[1] 271
[1] 367
[1] 295
[1] 326
[1] 318
[1] 250
[1] 270
[1] 366
[1] 255
[1] 294
[1] 327
[1] 319
[1] 271
[1] 251
[1] 367
[1] 254
[1] 295
[1] 326
[1] 318
[1] 270
[1] 250
[1] 366
[1] 294
[1] 255
[1] 327
[1] 319
[1] 271
[1] 251
[1] 367
[1] 295
[1] 254
[1] 326
[1] 318
[1] 250
[1] 270
[1] 366
[1] 294
[1] 255
[1] 254
[1] 174
[1] 257
[1] 258
[1] 259
[1] 258
[1] 259
[1] 258
[1] 259
[1] 258
[1] 142
[1] 259
[1] 258
[1] 319
[1] 327
[1] 251
[1] 271
[1] 367
[1] 295
[1] 158
[1] 62
[1] 78
[1] 42
[1] 86
[1] 46
[1] 182
[1] 34
[1] 134
[1] 30
[1] 150
[1] 38
[1] 198
[1] 102
[1] 190
[1] 110
[1] 170
[1] 90
[1] 22
[1] 98
[1] 114
[1] 138
[1] 122
[1] 259
[1] 318
[1] 326
[1] 250
[1] 270
[1] 366
[1] 294
[1] 255
[1] 258
[1] 67
[1] 251
[1] 319
[1] 327
[1] 271
[1] 367
[1] 295
[1] 254
[1] 259
[1] 401
[1] 402
[1] 403
[1] 402
[1] 403
[1] 402
[1] 403
[1] 402
[1] 403
[1] 402
[1] 250
[1] 326
[1] 318
[1] 270
[1] 366
[1] 294
[1] 209
[1] 210
[1] 211
[1] 210
[1] 211
[1] 217
[1] 218
[1] 219
[1] 218
[1] 187
[1] 210
[1] 219
[1] 218
[1] 219
[1] 211
[1] 218
[1] 210
[1] 219
[1] 218
[1] 211
[1] 210
[1] 258
[1] 179
[1] 219
[1] 205
[1] 206
[1] 207
[1] 83
[1] 206
[1] 207
[1] 206
[1] 207
[1] 107
[1] 206
[1] 403
[1] 207
[1] 225
[1] 226
[1] 227
[1] 226
[1] 227
[1] 226
[1] 206
[1] 227
[1] 226
[1] 218
[1] 227
[1] 143
[1] 226
[1] 211
[1] 75
[1] 255
[1] 155
[1] 402
[1] 319
[1] 271
[1] 251
[1] 327
[1] 367
[1] 295
[1] 207
[1] 227
[1] 210
[1] 147
[1] 219
[1] 403
[1] 259
[1] 91
[1] 213
[1] 214
[1] 215
[1] 214
[1] 215
[1] 214
[1] 163
[1] 206
[1] 215
[1] 214
[1] 215
[1] 214
[1] 171
[1] 226
[1] 402
[1] 218
[1] 254
[1] 318
[1] 366
[1] 326
[1] 23
[1] 294
[1] 195
[1] 131
[1] 270
[1] 215
[1] 250
[1] 87
[1] 183
[1] 211
[1] 227
[1] 258
[1] 115
[1] 341
[1] 342
[1] 343
[1] 342
[1] 343
[1] 342
[1] 343
[1] 342
[1] 343
[1] 123
[1] 342
[1] 207
[1] 403
[1] 214
[1] 175
[1] 159
[1] 343
[1] 265
[1] 266
[1] 267
[1] 266
[1] 226
[1] 267
[1] 266
[1] 267
[1] 266
[1] 267
[1] 47
[1] 79
[1] 43
[1] 35
[1] 135
[1] 199
[1] 31
[1] 151
[1] 39
[1] 63
[1] 103
[1] 191
[1] 111
[1] 281
[1] 282
[1] 283
[1] 266
[1] 282
[1] 99
[1] 283
[1] 139
[1] 342
[1] 282
[1] 283
[1] 282
[1] 283
[1] 282
[1] 210
[1] 385
[1] 386
[1] 387
[1] 386
[1] 387
[1] 386
[1] 387
[1] 386
[1] 377
[1] 378
[1] 379
[1] 378
[1] 379
[1] 378
[1] 379
[1] 387
[1] 378
[1] 379
[1] 386
[1] 378
[1] 343
[1] 267
[1] 353
[1] 354
[1] 355
[1] 354
[1] 355
[1] 354
[1] 355
[1] 206
[1] 354
[1] 355
[1] 354
[1] 283
[1] 319
[1] 327
[1] 215
[1] 379
[1] 255
[1] 219
[1] 355
[1] 273
[1] 274
[1] 275
[1] 274
[1] 275
[1] 345
[1] 346
[1] 347
[1] 346
[1] 274
[1] 347
[1] 346
[1] 367
[1] 275
[1] 347
[1] 346
[1] 274
[1] 387
[1] 347
[1] 346
[1] 266
[1] 275
[1] 274
[1] 354
[1] 227
[1] 402
[1] 282
[1] 378
[1] 313
[1] 314
[1] 315
[1] 314
[1] 315
[1] 314
[1] 315
[1] 347
[1] 314
[1] 315
[1] 314
[1] 342
[1] 361
[1] 362
[1] 363
[1] 362
[1] 363
[1] 362
[1] 285
[1] 286
[1] 287
[1] 286
[1] 363
[1] 287
[1] 286
[1] 362
[1] 346
[1] 287
[1] 286
[1] 363
[1] 386
[1] 369
[1] 370
[1] 287
[1] 371
[1] 362
[1] 370
[1] 371
[1] 315
[1] 286
[1] 370
[1] 305
[1] 306
[1] 371
[1] 307
[1] 306
[1] 307
[1] 275
[1] 370
[1] 306
[1] 259
[1] 393
[1] 394
[1] 307
[1] 395
[1] 394
[1] 371
[1] 395
[1] 306
[1] 394
[1] 357
[1] 358
[1] 359
[1] 358
[1] 359
[1] 395
[1] 358
[1] 370
[1] 359
[1] 307
[1] 394
[1] 358
[1] 359
[1] 214
[1] 306
[1] 355
[1] 395
[1] 358
[1] 381
[1] 382
[1] 383
[1] 382
[1] 314
[1] 394
[1] 287
[1] 383
[1] 382
[1] 383
[1] 382
[1] 289
[1] 290
[1] 291
[1] 379
[1] 290
[1] 291
[1] 383
[1] 290
[1] 291
[1] 274
[1] 382
[1] 290
[1] 295
[1] 347
[1] 291
[1] 359
[1] 290
[1] 286
[1] 363
[1] 373
[1] 374
[1] 375
[1] 374
[1] 375
[1] 374
[1] 375
[1] 267
[1] 374
[1] 375
[1] 329
[1] 330
[1] 331
[1] 330
[1] 374
[1] 226
[1] 331
[1] 330
[1] 337
[1] 338
[1] 339
[1] 331
[1] 338
[1] 339
[1] 338
[1] 349
[1] 350
[1] 351
[1] 350
[1] 330
[1] 339
[1] 351
[1] 350
[1] 338
[1] 371
[1] 351
[1] 354
[1] 350
[1] 358
[1] 211
[1] 339
[1] 397
[1] 398
[1] 399
[1] 283
[1] 331
[1] 398
[1] 399
[1] 351
[1] 398
[1] 338
[1] 399
[1] 315
[1] 307
[1] 350
[1] 398
[1] 330
[1] 399
[1] 398
[1] 395
[1] 378
[1] 375
[1] 275
[1] 346
[1] 383
[1] 339
[1] 287
[1] 351
[1] 221
[1] 222
[1] 223
[1] 222
[1] 223
[1] 222
[1] 321
[1] 322
[1] 399
[1] 323
[1] 291
[1] 322
[1] 362
[1] 223
[1] 323
[1] 387
[1] 322
[1] 222
[1] 323
[1] 322
[1] 223
[1] 374
[1] 323
[1] 222
[1] 359
[1] 322
[1] 207
[1] 338
[1] 314
[1] 370
[1] 350
[1] 266
[1] 398
[1] 306
[1] 331
[1] 394
[1] 254
[1] 218
[1] 286
[1] 382
[1] 290
[1] 389
[1] 390
[1] 391
[1] 390
[1] 323
[1] 391
[1] 390
[1] 355
[1] 391
[1] 358
[1] 390
[1] 223
[1] 339
[1] 351
[1] 391
[1] 399
[1] 390
[1] 271
[1] 282
[1] 333
[1] 334
[1] 233
[1] 234
[1] 335
[1] 235
[1] 251
[1] 229
[1] 230
[1] 334
[1] 234
[1] 231
[1] 230
[1] 335
[1] 235
[1] 379
[1] 231
[1] 309
[1] 310
[1] 334
[1] 234
[1] 311
[1] 230
[1] 310
[1] 311
[1] 335
[1] 235
[1] 231
[1] 310
[1] 334
[1] 234
[1] 230
[1] 311
[1] 330
[1] 310
[1] 335
[1] 235
[1] 231
[1] 311
[1] 322
[1] 334
[1] 234
[1] 230
[1] 310
[1] 347
[1] 274
[1] 343
[1] 335
[1] 235
[1] 231
[1] 363
[1] 386
[1] 311
[1] 338
[1] 315
[1] 350
[1] 267
[1] 375
[1] 222
[1] 398
[1] 371
[1] 391
[1] 215
[1] 323
[1] 307
[1] 334
[1] 234
[1] 230
[1] 310
[1] 395
[1] 287
[1] 383
[1] 227
[1] 359
[1] 291
[1] 277
[1] 278
[1] 245
[1] 246
[1] 279
[1] 301
[1] 302
[1] 247
[1] 261
[1] 262
[1] 278
[1] 303
[1] 237
[1] 238
[1] 263
[1] 246
[1] 239
[1] 302
[1] 262
[1] 279
[1] 238
[1] 247
[1] 303
[1] 263
[1] 278
[1] 239
[1] 246
[1] 302
[1] 262
[1] 238
[1] 279
[1] 247
[1] 303
[1] 263
[1] 239
[1] 241
[1] 242
[1] 243
[1] 278
[1] 242
[1] 246
[1] 302
[1] 297
[1] 298
[1] 262
[1] 238
[1] 243
[1] 354
[1] 299
[1] 298
[1] 242
[1] 299
[1] 378
[1] 298
[1] 279
[1] 243
[1] 247
[1] 303
[1] 263
[1] 239
[1] 299
[1] 242
[1] 210
[1] 298
[1] 278
[1] 246
[1] 302
[1] 262
[1] 238
[1] 322
[1] 390
[1] 235
[1] 335
[1] 243
[1] 231
[1] 311
[1] 346
[1] 299
[1] 242
[1] 331
[1] 298
[1] 339
[1] 314
[1] 351
[1] 266
[1] 362
[1] 399
[1] 374
[1] 223
[1] 334
[1] 234
[1] 230
[1] 206
[1] 310
[1] 279
[1] 303
[1] 247
[1] 263
[1] 239
[1] 370
[1] 286
[1] 306
[1] 243
[1] 299
[1] 394
[1] 382
[1] 358
[1] 275
[1] 290
[1] 262
[1] 323
[1] 403
[1] 278
[1] 302
[1] 246
[1] 238
[1] 391
[1] 283
[1] 242
[1] 330
[1] 298
[1] 338
[1] 342
[1] 350
[1] 398
[1] 387
[1] 263
[1] 335
[1] 231
[1] 235
[1] 311
[1] 222
[1] 214
[1] 274
[1] 379
[1] 211
[1] 262
[1] 322
[1] 243
[1] 347
[1] 355
[1] 303
[1] 279
[1] 247
[1] 239
[1] 390
[1] 299
[1] 315
[1] 267
[1] 395
[1] 291
[1] 334
[1] 230
[1] 234
[1] 310
[1] 363
[1] 242
[1] 287
[1] 375
[1] 371
[1] 307
[1] 255
[1] 219
[1] 383
[1] 263
[1] 302
[1] 278
[1] 246
[1] 238
[1] 282
[1] 339
[1] 331
[1] 351
[1] 298
[1] 394
[1] 399
[1] 290
[1] 243
[1] 386
[1] 223
[1] 359
[1] 275
[1] 262
[1] 323
[1] 247
[1] 362
[1] 391
[1] 299
[1] 370
[1] 231
[1] 335
[1] 306
[1] 235
[1] 311
[1] 242
[1] 343
[1] 374
[1] 382
[1] 207
[1] 330
[1] 222
[1] 279
[1] 303
[1] 239
[1] 246
[1] 298
[1] 395
[1] 291
[1] 215
[1] 390
[1] 278
[1] 302
[1] 263
[1] 387
[1] 238
[1] 363
[1] 283
[1] 371
[1] 307
[1] 243
[1] 383
[1] 331
[1] 223
[1] 375
[1] 247
[1] 299
[1] 391
[1] 279
[1] 303
[1] 239
> 
> save(Estimate, B, M, N, subsize, file = "parallel_est.Rdata")
> 
> proc.time()
     user    system   elapsed 
943652.07   1533.10  22092.82 
