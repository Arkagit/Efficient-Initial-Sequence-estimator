
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(111)
> library(mcmcse)
> library("coda")
> library(bpr)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> library(Rcpp)
> library(RcppDist)
> load("..//data_calcium_imaging_for_poisson.RData")
> str(data)
'data.frame':	920 obs. of  8 variables:
 $ cell_id   : num  5.17e+08 5.42e+08 5.17e+08 5.17e+08 5.17e+08 ...
 $ area      : Factor w/ 6 levels "VISal","VISam",..: 4 4 4 4 4 4 4 4 4 4 ...
 $ CRE.line  : Factor w/ 13 levels "Cux2-CreERT2",..: 9 9 9 9 9 9 9 9 9 9 ...
 $ depth     : num  350 350 350 350 350 350 350 350 350 350 ...
 $ mouse_id  : num  5.02e+08 5.21e+08 5.02e+08 5.02e+08 5.02e+08 ...
 $ experiment: Factor w/ 4 levels "A","B","C","C2": 3 3 3 3 3 1 1 1 1 1 ...
 $ n_spikes  : num  410 188 67 218 45 366 869 735 185 656 ...
 $ comb      : chr  "VISpScnn1a-Tg3-Cre350C" "VISpScnn1a-Tg3-Cre350C" "VISpScnn1a-Tg3-Cre350C" "VISpScnn1a-Tg3-Cre350C" ...
> 
> source("../Cov_func.R")
Registered S3 methods overwritten by 'RcppEigen':
  method               from         
  predict.fastLm       RcppArmadillo
  print.fastLm         RcppArmadillo
  summary.fastLm       RcppArmadillo
  print.summary.fastLm RcppArmadillo

Attaching package: ‘RcppEigen’

The following objects are masked from ‘package:RcppArmadillo’:

    fastLm, fastLmPure

> #library(matrixcalc)
> data$depth2 = data$depth^2
> X = model.matrix(~ ., data = data[,c(2:4,6,9)])
> str(X)
 num [1:920, 1:23] 1 1 1 1 1 1 1 1 1 1 ...
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:920] "1" "151" "9610" "9710" ...
  ..$ : chr [1:23] "(Intercept)" "areaVISam" "areaVISl" "areaVISp" ...
 - attr(*, "assign")= int [1:23] 0 1 1 1 1 1 2 2 2 2 ...
 - attr(*, "contrasts")=List of 3
  ..$ area      : chr "contr.treatment"
  ..$ CRE.line  : chr "contr.treatment"
  ..$ experiment: chr "contr.treatment"
> p = ncol(X)
> n = nrow(X)
> y = data$n_spikes
> str(y)
 num [1:920] 410 188 67 218 45 366 869 735 185 656 ...
> 
> mle.start <- c(summary(glm(y ~ X - 1, family = "poisson"(link = "log")))$coef[,1])
> str(mle.start)
 Named num [1:23] 6.2146 -0.2259 0.0752 0.0298 -0.2077 ...
 - attr(*, "names")= chr [1:23] "X(Intercept)" "XareaVISam" "XareaVISl" "XareaVISp" ...
> 
> N = c(5e3, 8e3, 1e4, 3e4, 5e4, 8e4, 1e5, 3e5, 5e5)
> repet = 1e2
> burnin = 1:100
> nloops <- 100
> #subsize <- floor(seq(1e4, N, length = nloops))
> data = data.frame(y=y, X)
> 
> #----------------------------------------------------------------------------------#
> 
> 
> 
> bm_time = rep(0, length(N))
> ise_time = rep(0, length(N))
> sve_time = rep(0, length(N))
> cc_time = rep(0, length(N))
> mls_time = rep(0, length(N))
> 
> 
> 
> 
> Table = list()
> 
> parallel::detectCores()
[1] 64
> n.cores <- 50
> doParallel::registerDoParallel(cores = n.cores)
> 
> 
> 
> Table = foreach(i = 1:repet, .packages = c("mcmcse"))%dopar%{
+ 	
+ 	 chain <- bpr::sample_bpr(y ~ . - 1, data = data,
+                       iter = max(N), burnin = max(burnin),
+                       prior = list(type="gaussian", b = rep(0,p), B = diag(p)*2), 
+                       pars = list(max_dist = 1e+6),
+                       state = mle.start)$sim$beta
+ 	 mat = list()
+ 
+ 	for(j in 1:length(N)){
+ 		minichain = chain[1:N[j],]
+ 
+ 		gam <- var(minichain)
+ 
+ 		bm_time[j] = system.time(bm <- mcse.multi(minichain, r = 1, method = "bm", adjust = FALSE)$cov)[3]
+ 
+ 		ise_time[j] = system.time(ise <- mcse.initseq(minichain)$cov)[3]
+ 		
+ 		sve_time[j] = system.time(sve <- mcse.multi(minichain, r = 1,method = "tukey", adjust = FALSE)$cov)[3]
+ 		
+ 		cc_time[j] = system.time(cc <- cov.sig(minichain, type = "geyer")$covariance)[3]
+ 		
+ 		mls_time[j] = system.time(mls <- cov.sig(minichain, type = "MomentLS")$covariance)[3]
+ 
+ 		mat = append(mat, list(gam, bm, ise, sve, cc, mls))
+ 	}
+ 
+ 	print(i)
+ 
+ 	comb_time = list(bm_time, ise_time, sve_time, cc_time, mls_time)
+ 
+ 	list(mat, comb_time)
+ }
Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

Running MH sampler with a gaussian prior distribution.
Chains initialized at the provided initial points.

Sampling 5e+05 iterations 

