p = 5
#Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
rho = 0.9
vec_omega = c(1, rho, rho^(2), rho^(3), rho^(4),
rho, rho^(2), rho^(3), rho^(4), 1,
rho^(2), rho^(3), rho^(4), 1, rho,
rho^(3), rho^(4), 1, rho, rho^(2),
rho^(4), 1, rho, rho^(2), rho^(3))
vec_v = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
set.seed(777)
library(MASS)
library(mcmcse)
library(ellipse)
#dimensions
p = 5
#Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
#Variance for Error
rho = 0.9
vec_omega = c(1, rho, rho^(2), rho^(3), rho^(4),
rho, rho^(2), rho^(3), rho^(4), 1,
rho^(2), rho^(3), rho^(4), 1, rho,
rho^(3), rho^(4), 1, rho, rho^(2),
rho^(4), 1, rho, rho^(2), rho^(3))
omega = matrix(vec_omega, nrow = 5, byrow = TRUE)
vec_V = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
V = matrix(vec_V, nrow = 5, byrow = TRUE)
#Asymptotic variance
Sigma = solve(diag(rep(1,p)) - phi)%*%V + V%*%solve(diag(rep(1,p)) - phi) - V
at = mvrnorm(10000, mu = c(0,0,0,0,0), Sigma = omega)
omega
det(omega)
#Asymptotic variance
sig = solve(diag(rep(1,p)) - phi)%*%V + V%*%solve(diag(rep(1,p)) - phi) - V
sig
det(sig)
set.seed(777)
library(MASS)
library(mcmcse)
library(ellipse)
#dimensions
p = 5
#Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
#Variance for Error
rho = 0.9
vec_omega = c(1, rho, rho^(2), rho^(3), rho^(4),
rho, rho^(2), rho^(3), rho^(4), 1,
rho^(2), rho^(3), rho^(4), 1, rho,
rho^(3), rho^(4), 1, rho, rho^(2),
rho^(4), 1, rho, rho^(2), rho^(3))
omega = matrix(vec_omega, nrow = 5, byrow = TRUE)
vec_V = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
V = matrix(vec_V, nrow = 5, byrow = TRUE)
#Asymptotic variance
sig = solve(diag(rep(1,p)) - phi)%*%V + V%*%solve(diag(rep(1,p)) - phi) - V
at = mvrnorm(10000, mu = c(0,0,0,0,0), Sigma = omega)
eigen(omega)
set.seed(777)
library(MASS)
library(mcmcse)
library(ellipse)
#dimensions
p = 5
#Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
#Variance for Error
rho = 0.9
vec_omega = c(1, rho, rho^(2), rho^(3), rho^(4),
rho, 1, rho, rho^(2), rho^(3),
rho^(2), rho, 1, rho, rho^(2),
rho^(3), rho^(2), rho, 1, rho,
rho^(4), rho^(3), rho^(2), rho, 1)
omega = matrix(vec_omega, nrow = 5, byrow = TRUE)
eigen(omega)
vec_V = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
V = matrix(vec_V, nrow = 5, byrow = TRUE)
#Asymptotic variance
sig = solve(diag(rep(1,p)) - phi)%*%V + V%*%solve(diag(rep(1,p)) - phi) - V
at = mvrnorm(10000, mu = c(0,0,0,0,0), Sigma = omega)
var1 = matrix(0, 10000, p)
var1[1,] = c(1,1)
set.seed(777)
library(MASS)
library(mcmcse)
library(ellipse)
#dimensions
p = 5
#Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
#Variance for Error
rho = 0.9
vec_omega = c(1, rho, rho^(2), rho^(3), rho^(4),
rho, 1, rho, rho^(2), rho^(3),
rho^(2), rho, 1, rho, rho^(2),
rho^(3), rho^(2), rho, 1, rho,
rho^(4), rho^(3), rho^(2), rho, 1)
omega = matrix(vec_omega, nrow = 5, byrow = TRUE)
eigen(omega)
vec_V = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
V = matrix(vec_V, nrow = 5, byrow = TRUE)
#Asymptotic variance
sig = solve(diag(rep(1,p)) - phi)%*%V + V%*%solve(diag(rep(1,p)) - phi) - V
at = mvrnorm(10000, mu = c(0,0,0,0,0), Sigma = omega)
var1 = matrix(0, 10000, p)
var1[1,] = c(1,1,1,1,1)
for (i in 2:10000){
var1[i,] = phi%*%var1[i-1,] + at[i,]
}
head(var1)
source("Data_gen.R")
library(MASS)
library(mcmcse)
library(ellipse)
library(mcmc)
# datasize
n = 1e7
# dimensions
p = 5
# Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
# Variance for Error
rho = 0.9
vec_omega = c(1, rho, rho^(2), rho^(3), rho^(4),
rho, 1, rho, rho^(2), rho^(3),
rho^(2), rho, 1, rho, rho^(2),
rho^(3), rho^(2), rho, 1, rho,
rho^(4), rho^(3), rho^(2), rho, 1)
omega = matrix(vec_omega, nrow = 5, byrow = TRUE)
eigen(omega)
vec_V = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
V = matrix(vec_V, nrow = 5, byrow = TRUE)
# Asymptotic variance
sig = solve(diag(rep(1,p)) - phi)%*%V + V%*%solve(diag(rep(1,p)) - phi) - V
# VAR process
err = mvrnorm(n, mu = c(0,0,0,0,0), Sigma = omega)
data = matrix(0, n, p)
data[1,] = c(1,1,1,1,1)
for (i in 2:n){
data[i,] = phi%*%data[i-1,] + err[i,]
}
head(data)
source("Gen_data.R")
library(MASS)
library(mcmcse)
library(ellipse)
library(mcmc)
library(HadamardR)
rho^(1:p)
Hadamard_Matrix(p)
# dimensions
p = 6
Hadamard_Matrix(p)
# dimensions
p = 8
Hadamard_Matrix(p)
source("Gen_data.R")
setwd("/Users/arkabanerjee/Documents/GitHub/Efficient-Initial-Sequence-estimator")
source("Gen_data.R")
# datasize
n = 5e4
data = data[1:n,]
# Batch means estimation
BME = mcse.multi(data, method = "bm", r = 3)
BME$cov
# ISE estimation
IS = mcse.initseq(data)
IS$cov
# correlation matrix by batch means
BM = cov2cor(mcse.multi(data, method = "bm", r = 1)$cov)
# Standard deviation bt ISE
sd = numeric(0)
for (i in 1:p) {
sd[i] = sqrt(initseq(data[,i])$var.pos)
}
# new variance estimate
var_est = diag(sd)%*%BM%*%diag(sd)
# Plots for 1st and 3rd component
new_v13 = matrix(c(var_est[1,1],var_est[1,3],var_est[3,1],var_est[3,3]),
byrow = TRUE, nrow = 2)
pl3 = ellipse(new_v13, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
ise13 = matrix(c(IS$cov[1,1],IS$cov[1,3],IS$cov[3,1],IS$cov[3,3]),
byrow = TRUE, nrow = 2)
pl2 = ellipse(ise13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl2, type = "l", col = "green", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
b13 = matrix(c(BME$cov[1,1],BME$cov[1,3],BME$cov[3,1],BME$cov[3,3]),
byrow = TRUE, nrow = 2)
pl1 = ellipse(b13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl1, type = "l", col = "red", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
tr13 = matrix(c(sig[1,1], sig[1,3], sig[3,1], sig[3,3]),
byrow = TRUE, nrow = 2)
pl0 = ellipse(tr13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl0, type = "l", col = "black", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
legend(x = "topleft", lty = c(1,1,1,1), text.font = 1,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
setwd("/Users/arkabanerjee/Documents/GitHub/Efficient-Initial-Sequence-estimator")
source("Gen_data.R")
# datasize
n = 5e4
data = data[1:n,]
# Batch means estimation
BME = mcse.multi(data, method = "bm", r = 3)
BME$cov
# ISE estimation
IS = mcse.initseq(data)
IS$cov
# correlation matrix by batch means
BM = cov2cor(mcse.multi(data, method = "bm", r = 1)$cov)
# Standard deviation bt ISE
sd = numeric(0)
for (i in 1:p) {
sd[i] = sqrt(initseq(data[,i])$var.pos)
}
# new variance estimate
var_est = diag(sd)%*%BM%*%diag(sd)
# Plots for 1st and 3rd component
new_v13 = matrix(c(var_est[1,p],var_est[1,p],var_est[p,1],var_est[p,p]),
byrow = TRUE, nrow = 2)
pl3 = ellipse(new_v13, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
ise13 = matrix(c(IS$cov[1,1],IS$cov[1,p],IS$cov[p,1],IS$cov[p,p]),
byrow = TRUE, nrow = 2)
pl2 = ellipse(ise13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl2, type = "l", col = "green", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
b13 = matrix(c(BME$cov[1,1],BME$cov[1,p],BME$cov[p,1],BME$cov[p,p]),
byrow = TRUE, nrow = 2)
pl1 = ellipse(b13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl1, type = "l", col = "red", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
tr13 = matrix(c(sig[1,1], sig[1,p], sig[p,1], sig[p,p]),
byrow = TRUE, nrow = 2)
pl0 = ellipse(tr13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl0, type = "l", col = "black", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
legend(x = "topleft", lty = c(1,1,1,1), text.font = 1,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
sig
BME$cov
IS$cov
var_est
library(MASS)
library(mcmcse)
library(ellipse)
library(mcmc)
library(HadamardR)
# datasize
n = 5e4
# dimensions
p = 8
# Product vector
rho = 0.95
phi = (1/p)*Hadamard_Matrix(p)%*%diag(rho^(1:p))%*%t(Hadamard_Matrix(p))
# Variance for Error
omega = diag(1, p)
#omega = matrix(1, ncol = p, nrow = p, byrow = TRUE)
#for (k in 1:p) {
#  for (l in 1:p) {
#    omega[k,l] = rho^(abs(k-l))
#  }
#}
#phi <- omega
#phi <- phi/max(eigen(phi)$values + .1)
#vec_omega = numeric(0)
#for (k in 1:p) {
#  vec_omega = append(vec_omega, omega[k,])
#}
#vec_V = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
#V = matrix(vec_V, nrow = p, byrow = TRUE)
# Asymptotic variance
#sig = solve(diag(1,p) - phi%*%phi)
sig = 2*solve(diag(1,p) - phi%*%phi)%*%solve(diag(1,p) - phi%*%phi)%*%omega - solve(diag(1,p) - phi%*%phi)%*%omega
# VAR process
err = mvrnorm(n, mu = rep(0,p), Sigma = omega)
data = matrix(0, n, p)
data[1,] = rep(1,p)
for (i in 2:n){
data[i,] = t(phi)%*%data[i-1,] + err[i,]
}
head(data)
setwd("/Users/arkabanerjee/Documents/GitHub/Efficient-Initial-Sequence-estimator")
source("Gen_data.R")
# datasize
n = 5e4
data = data[1:n,]
# Batch means estimation
BME = mcse.multi(data, method = "bm", r = 3)
BME$cov
# ISE estimation
IS = mcse.initseq(data)
IS$cov
# correlation matrix by batch means
BM = cov2cor(mcse.multi(data, method = "bm", r = 1)$cov)
# Standard deviation bt ISE
sd = numeric(0)
for (i in 1:p) {
sd[i] = sqrt(initseq(data[,i])$var.pos)
}
# new variance estimate
var_est = diag(sd)%*%BM%*%diag(sd)
# Plots for 1st and 3rd component
new_v13 = matrix(c(var_est[1,p],var_est[1,p],var_est[p,1],var_est[p,p]),
byrow = TRUE, nrow = 2)
pl3 = ellipse(new_v13, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
ise13 = matrix(c(IS$cov[1,1],IS$cov[1,p],IS$cov[p,1],IS$cov[p,p]),
byrow = TRUE, nrow = 2)
pl2 = ellipse(ise13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl2, type = "l", col = "green", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
b13 = matrix(c(BME$cov[1,1],BME$cov[1,p],BME$cov[p,1],BME$cov[p,p]),
byrow = TRUE, nrow = 2)
pl1 = ellipse(b13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl1, type = "l", col = "red", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
tr13 = matrix(c(sig[1,1], sig[1,p], sig[p,1], sig[p,p]),
byrow = TRUE, nrow = 2)
pl0 = ellipse(tr13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl0, type = "l", col = "black", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
legend(x = "topleft", lty = c(1,1,1,1), text.font = 1,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
sig
BME$cov
IS$cov
var_est
setwd("/Users/arkabanerjee/Documents/GitHub/Efficient-Initial-Sequence-estimator")
source("Gen_data.R")
# datasize
n = 1e6
data = data[1:n,]
# Batch means estimation
BME = mcse.multi(data, method = "bm", r = 3)
BME$cov
# ISE estimation
IS = mcse.initseq(data)
IS$cov
# correlation matrix by batch means
BM = cov2cor(mcse.multi(data, method = "bm", r = 1)$cov)
# Standard deviation bt ISE
sd = numeric(0)
for (i in 1:p) {
sd[i] = sqrt(initseq(data[,i])$var.pos)
}
# new variance estimate
var_est = diag(sd)%*%BM%*%diag(sd)
# Plots for 1st and 3rd component
new_v13 = matrix(c(var_est[1,p],var_est[1,p],var_est[p,1],var_est[p,p]),
byrow = TRUE, nrow = 2)
pl3 = ellipse(new_v13, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
ise13 = matrix(c(IS$cov[1,1],IS$cov[1,p],IS$cov[p,1],IS$cov[p,p]),
byrow = TRUE, nrow = 2)
pl2 = ellipse(ise13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl2, type = "l", col = "green", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
b13 = matrix(c(BME$cov[1,1],BME$cov[1,p],BME$cov[p,1],BME$cov[p,p]),
byrow = TRUE, nrow = 2)
pl1 = ellipse(b13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl1, type = "l", col = "red", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
tr13 = matrix(c(sig[1,1], sig[1,p], sig[p,1], sig[p,p]),
byrow = TRUE, nrow = 2)
pl0 = ellipse(tr13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl0, type = "l", col = "black", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
legend(x = "topleft", lty = c(1,1,1,1), text.font = 1,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
setwd("/Users/arkabanerjee/Documents/GitHub/Efficient-Initial-Sequence-estimator")
source("Gen_data.R")
# datasize
n = 1e7
data = data[1:n,]
setwd("/Users/arkabanerjee/Documents/GitHub/Efficient-Initial-Sequence-estimator")
source("Gen_data.R")
# datasize
n = 1e7
data = data[1:n,]
# Batch means estimation
BME = mcse.multi(data, method = "bm", r = 3)
BME$cov
# ISE estimation
IS = mcse.initseq(data)
IS$cov
# correlation matrix by batch means
BM = cov2cor(mcse.multi(data, method = "bm", r = 1)$cov)
# Standard deviation bt ISE
sd = numeric(0)
for (i in 1:p) {
sd[i] = sqrt(initseq(data[,i])$var.pos)
}
# new variance estimate
var_est = diag(sd)%*%BM%*%diag(sd)
# Plots for 1st and 3rd component
new_v13 = matrix(c(var_est[1,p],var_est[1,p],var_est[p,1],var_est[p,p]),
byrow = TRUE, nrow = 2)
pl3 = ellipse(new_v13, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
ise13 = matrix(c(IS$cov[1,1],IS$cov[1,p],IS$cov[p,1],IS$cov[p,p]),
byrow = TRUE, nrow = 2)
pl2 = ellipse(ise13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl2, type = "l", col = "green", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
b13 = matrix(c(BME$cov[1,1],BME$cov[1,p],BME$cov[p,1],BME$cov[p,p]),
byrow = TRUE, nrow = 2)
pl1 = ellipse(b13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl1, type = "l", col = "red", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
tr13 = matrix(c(sig[1,1], sig[1,p], sig[p,1], sig[p,p]),
byrow = TRUE, nrow = 2)
pl0 = ellipse(tr13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl0, type = "l", col = "black", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
legend(x = "topleft", lty = c(1,1,1,1), text.font = 1,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
# Plots for 1st and 3rd component
new_v13 = matrix(c(var_est[1,p],var_est[1,p],var_est[p,1],var_est[p,p]),
byrow = TRUE, nrow = 2)
pl3 = ellipse(new_v13, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component", xlim = c(-50,50), ylim = c(-50, 50))
ise13 = matrix(c(IS$cov[1,1],IS$cov[1,p],IS$cov[p,1],IS$cov[p,p]),
byrow = TRUE, nrow = 2)
pl2 = ellipse(ise13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl2, type = "l", col = "green", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
b13 = matrix(c(BME$cov[1,1],BME$cov[1,p],BME$cov[p,1],BME$cov[p,p]),
byrow = TRUE, nrow = 2)
pl1 = ellipse(b13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl1, type = "l", col = "red", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
tr13 = matrix(c(sig[1,1], sig[1,p], sig[p,1], sig[p,p]),
byrow = TRUE, nrow = 2)
pl0 = ellipse(tr13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl0, type = "l", col = "black", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "3rd Component")
legend(x = "topleft", lty = c(1,1,1,1), text.font = 1,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
var_est
sig
# Asymptotic variance
#sig = solve(diag(1,p) - phi%*%phi)
sig = 2*solve(diag(1,p) - phi%*%phi)%*%solve(diag(1,p) - phi%*%phi)%*%omega - solve(diag(1,p) - phi%*%phi)%*%omega
sig
# Asymptotic variance
sig = (diag(1,p) + 2*phi%*%phi%*%solve(diag(1,p) - phi%*%phi))%*%solve(diag(1,p) - phi%*%phi)%*%omega
sig
phi
source("Gen_data.R")
# datasize
n = 1e7
data = data[1:n,]
# Batch means estimation
BME = mcse.multi(data, method = "bm", r = 3)
BME$cov
setwd("/Users/arkabanerjee/Documents/GitHub/Efficient-Initial-Sequence-estimator")
source("Gen_data.R")
# datasize
n = 1e7
data = data[1:n,]
# Batch means estimation
BME = mcse.multi(data, method = "bm", r = 3)
BME$cov
# ISE estimation
IS = mcse.initseq(data)
IS$cov
# correlation matrix by batch means
BM = cov2cor(mcse.multi(data, method = "bm", r = 1)$cov)
# Standard deviation bt ISE
sd = numeric(0)
for (i in 1:p) {
sd[i] = sqrt(initseq(data[,i])$var.pos)
}
# new variance estimate
var_est = diag(sd)%*%BM%*%diag(sd)
# Plots for 1st and 3rd component
new_v13 = matrix(c(var_est[1,p],var_est[1,p],var_est[p,1],var_est[p,p]),
byrow = TRUE, nrow = 2)
pl3 = ellipse(new_v13, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "pth Component")
ise13 = matrix(c(IS$cov[1,1],IS$cov[1,p],IS$cov[p,1],IS$cov[p,p]),
byrow = TRUE, nrow = 2)
pl2 = ellipse(ise13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl2, type = "l", col = "green", main = "Confidence Ellipsoid")
b13 = matrix(c(BME$cov[1,1],BME$cov[1,p],BME$cov[p,1],BME$cov[p,p]),
byrow = TRUE, nrow = 2)
pl1 = ellipse(b13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl1, type = "l", col = "red", main = "Confidence Ellipsoid")
tr13 = matrix(c(sig[1,1], sig[1,p], sig[p,1], sig[p,p]),
byrow = TRUE, nrow = 2)
pl0 = ellipse(tr13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl0, type = "l", col = "black", main = "Confidence Ellipsoid")
legend(x = "topleft", lty = c(1,1,1,1), text.font = 1,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
