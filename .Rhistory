result_cov
kronecker(phi,phi)
V1 = matrix(solve(diag(c(1,1,1,1)) - kronecker(phi,phi))%*%c(sig), nrow = 2)
Tr = solve(diag(c(1,1)) - phi)%*%V1 + V1%*%solve(diag(c(1,1)) - phi) - V1
Tr
p2= ellipse(BM$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(p2, type = "l", col = "red", xlim = c(-300,300),ylim = c(-300,300))
p3= ellipse(ISE$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p3, type = "l", col = "blue")
p4= ellipse(Tr, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p4, type = "l", col = "brown")
p1 = ellipse(result_cov, centre = c(0, 0), which = c(1, 2), npoints = 100)
lines(p1, type= "l", xlab = "Variable-1", ylab = "Variable-2")
legend(x = "topleft", box.col = "brown",
bg ="white", box.lwd = 2 , title="Confidence Ellipsoid",
legend=c("New est","Batch Means","ISE","True"),
fill = c("black","red", "blue", "brown"))
set.seed(777)
library(MASS)
library(mcmcse)
library(ellipse)
phi = matrix(c(0.99, 0, 0, 0.99), 2)
sig = matrix(c(1, 0.95, 0.95, 1), 2)
at = mvrnorm(10000, mu = c(0,0), Sigma = sig)
var1 = matrix(0, 10000, 2)
var1[1,] = c(1,1)
for (i in 2:10000){
var1[i,] = phi%*%var1[i-1,] + at[i,]
}
head(var1)
BM = mcse.multi(var1, method = "bm", r=1,size = "sqroot")
BM$cov
corr_mat = matrix(c(1,BM$cov[1,2]/sqrt(BM$cov[1,1]*BM$cov[2,2]),BM$cov[2,1]/sqrt(BM$cov[1,1]*BM$cov[2,2]),1),2)
corr_mat
ISE = mcse.initseq(var1)
diag_mat = diag(c(ISE$cov[1,1], ISE$cov[2,2]))
result_cov = sqrt(diag_mat)%*%corr_mat%*%sqrt(diag_mat)
result_cov
kronecker(phi,phi)
V1 = matrix(solve(diag(c(1,1,1,1)) - kronecker(phi,phi))%*%c(sig), nrow = 2)
Tr = solve(diag(c(1,1)) - phi)%*%V1 + V1%*%solve(diag(c(1,1)) - phi) - V1
Tr
p2= ellipse(BM$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(p2, type = "l", col = "red", xlim = c(-300,300),ylim = c(-300,300))
p3= ellipse(ISE$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p3, type = "l", col = "blue")
p4= ellipse(Tr, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p4, type = "l", col = "brown")
p1 = ellipse(result_cov, centre = c(0, 0), which = c(1, 2), npoints = 100)
lines(p1, type= "l", xlab = "Variable-1", ylab = "Variable-2")
legend(x = "topleft", box.col = "brown",
bg ="white", box.lwd = 2 , title="Confidence Ellipsoid",
legend=c("New est","Batch Means","ISE","True"),
col = c("black","red", "blue", "brown"), lty = c(1,1,1,1))
p2= ellipse(BM$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(p2, type = "l", col = "red", xlim = c(-300,300),ylim = c(-300,300))
p4= ellipse(Tr, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p4, type = "l", col = "brown", xlim = c(-300,300),ylim = c(-300,300))
p4= ellipse(Tr, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(p4, type = "l", col = "brown", xlim = c(-300,300),ylim = c(-300,300))
p2= ellipse(BM$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p2, type = "l", col = "red")
p3= ellipse(ISE$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p3, type = "l", col = "blue")
p1 = ellipse(result_cov, centre = c(0, 0), which = c(1, 2), npoints = 100)
lines(p1, type= "l", xlab = "Variable-1", ylab = "Variable-2")
set.seed(777)
library(MASS)
library(mcmcse)
library(ellipse)
phi = matrix(c(0.99, 0, 0, 0.99), 2)
sig = matrix(c(1, 0.95, 0.95, 1), 2)
at = mvrnorm(10000, mu = c(0,0), Sigma = sig)
var1 = matrix(0, 10000, 2)
var1[1,] = c(1,1)
for (i in 2:10000){
var1[i,] = phi%*%var1[i-1,] + at[i,]
}
head(var1)
BM = mcse.multi(var1, method = "bm", r=1,size = "sqroot")
BM$cov
corr_mat = matrix(c(1,BM$cov[1,2]/sqrt(BM$cov[1,1]*BM$cov[2,2]),BM$cov[2,1]/sqrt(BM$cov[1,1]*BM$cov[2,2]),1),2)
corr_mat
ISE = mcse.initseq(var1)
diag_mat = diag(c(ISE$cov[1,1], ISE$cov[2,2]))
result_cov = sqrt(diag_mat)%*%corr_mat%*%sqrt(diag_mat)
result_cov
kronecker(phi,phi)
V1 = matrix(solve(diag(c(1,1,1,1)) - kronecker(phi,phi))%*%c(sig), nrow = 2)
Tr = solve(diag(c(1,1)) - phi)%*%V1 + V1%*%solve(diag(c(1,1)) - phi) - V1
Tr
p4= ellipse(Tr, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(p4, type = "l", col = "brown", xlim = c(-300,300),ylim = c(-300,300), main = "Confidence Ellipsoid")
p2= ellipse(BM$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p2, type = "l", col = "red")
p3= ellipse(ISE$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p3, type = "l", col = "blue")
p1 = ellipse(result_cov, centre = c(0, 0), which = c(1, 2), npoints = 100)
lines(p1, type= "l", xlab = "Variable-1", ylab = "Variable-2")
legend(x = "topleft", box.col = "brown",
bg ="white", box.lwd = 2 , title="Estimators",
legend=c("New est","Batch Means","ISE","True"),
col = c("black","red", "blue", "brown"), lty = c(1,1,1,1))
p4= ellipse(Tr, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(p4, type = "l", col = "brown", xlim = c(-300,300),ylim = c(-300,300), main = "Confidence Ellipsoid")
p2= ellipse(BM$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p2, type = "l", col = "red")
p3= ellipse(ISE$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p3, type = "l", col = "blue")
p1 = ellipse(result_cov, centre = c(0, 0), which = c(1, 2), npoints = 100)
lines(p1, type= "l", xlab = "Variable-1", ylab = "Variable-2")
legend(x = "topleft", box.col = "brown",
bg ="white", box.lwd = 2 , title="Estimators",
legend=c("New est","Batch Means","ISE","True"),
col = c("black","red", "blue", "brown"), lty = c(1,1,1,1))
p4= ellipse(Tr, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(p4, type = "l", col = "brown", xlim = c(-300,300),ylim = c(-300,300), main = "Confidence Ellipsoid")
legend(x = "topleft", box.col = "brown",
bg ="white", box.lwd = 2 , title="Estimators",
legend=c("New est","Batch Means","ISE","True"),
col = c("black","red", "blue", "brown"), lty = c(1,1,1,1))
p2= ellipse(BM$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p2, type = "l", col = "red")
p3= ellipse(ISE$cov, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(p3, type = "l", col = "blue")
p1 = ellipse(result_cov, centre = c(0, 0), which = c(1, 2), npoints = 100)
lines(p1, type= "l", xlab = "Variable-1", ylab = "Variable-2")
p^(2)
#dimensions
p = 5
rep(1, p^(2))
#Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
kronecker(phi,phi)
kronecker(phi,phi)
#dimensions
p = 5
#Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
rho = 0.9
vec_omega = c(1, rho, rho^(2), rho^(3), rho^(4),
rho, rho^(2), rho^(3), rho^(4), 1,
rho^(2), rho^(3), rho^(4), 1, rho,
rho^(3), rho^(4), 1, rho, rho^(2),
rho^(4), 1, rho, rho^(2), rho^(3))
vec_v = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
set.seed(777)
library(MASS)
library(mcmcse)
library(ellipse)
#dimensions
p = 5
#Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
#Variance for Error
rho = 0.9
vec_omega = c(1, rho, rho^(2), rho^(3), rho^(4),
rho, rho^(2), rho^(3), rho^(4), 1,
rho^(2), rho^(3), rho^(4), 1, rho,
rho^(3), rho^(4), 1, rho, rho^(2),
rho^(4), 1, rho, rho^(2), rho^(3))
omega = matrix(vec_omega, nrow = 5, byrow = TRUE)
vec_V = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
V = matrix(vec_V, nrow = 5, byrow = TRUE)
#Asymptotic variance
Sigma = solve(diag(rep(1,p)) - phi)%*%V + V%*%solve(diag(rep(1,p)) - phi) - V
at = mvrnorm(10000, mu = c(0,0,0,0,0), Sigma = omega)
omega
det(omega)
#Asymptotic variance
sig = solve(diag(rep(1,p)) - phi)%*%V + V%*%solve(diag(rep(1,p)) - phi) - V
sig
det(sig)
set.seed(777)
library(MASS)
library(mcmcse)
library(ellipse)
#dimensions
p = 5
#Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
#Variance for Error
rho = 0.9
vec_omega = c(1, rho, rho^(2), rho^(3), rho^(4),
rho, rho^(2), rho^(3), rho^(4), 1,
rho^(2), rho^(3), rho^(4), 1, rho,
rho^(3), rho^(4), 1, rho, rho^(2),
rho^(4), 1, rho, rho^(2), rho^(3))
omega = matrix(vec_omega, nrow = 5, byrow = TRUE)
vec_V = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
V = matrix(vec_V, nrow = 5, byrow = TRUE)
#Asymptotic variance
sig = solve(diag(rep(1,p)) - phi)%*%V + V%*%solve(diag(rep(1,p)) - phi) - V
at = mvrnorm(10000, mu = c(0,0,0,0,0), Sigma = omega)
eigen(omega)
set.seed(777)
library(MASS)
library(mcmcse)
library(ellipse)
#dimensions
p = 5
#Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
#Variance for Error
rho = 0.9
vec_omega = c(1, rho, rho^(2), rho^(3), rho^(4),
rho, 1, rho, rho^(2), rho^(3),
rho^(2), rho, 1, rho, rho^(2),
rho^(3), rho^(2), rho, 1, rho,
rho^(4), rho^(3), rho^(2), rho, 1)
omega = matrix(vec_omega, nrow = 5, byrow = TRUE)
eigen(omega)
vec_V = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
V = matrix(vec_V, nrow = 5, byrow = TRUE)
#Asymptotic variance
sig = solve(diag(rep(1,p)) - phi)%*%V + V%*%solve(diag(rep(1,p)) - phi) - V
at = mvrnorm(10000, mu = c(0,0,0,0,0), Sigma = omega)
var1 = matrix(0, 10000, p)
var1[1,] = c(1,1)
set.seed(777)
library(MASS)
library(mcmcse)
library(ellipse)
#dimensions
p = 5
#Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
#Variance for Error
rho = 0.9
vec_omega = c(1, rho, rho^(2), rho^(3), rho^(4),
rho, 1, rho, rho^(2), rho^(3),
rho^(2), rho, 1, rho, rho^(2),
rho^(3), rho^(2), rho, 1, rho,
rho^(4), rho^(3), rho^(2), rho, 1)
omega = matrix(vec_omega, nrow = 5, byrow = TRUE)
eigen(omega)
vec_V = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
V = matrix(vec_V, nrow = 5, byrow = TRUE)
#Asymptotic variance
sig = solve(diag(rep(1,p)) - phi)%*%V + V%*%solve(diag(rep(1,p)) - phi) - V
at = mvrnorm(10000, mu = c(0,0,0,0,0), Sigma = omega)
var1 = matrix(0, 10000, p)
var1[1,] = c(1,1,1,1,1)
for (i in 2:10000){
var1[i,] = phi%*%var1[i-1,] + at[i,]
}
head(var1)
source("Data_gen.R")
library(MASS)
library(mcmcse)
library(ellipse)
library(mcmc)
# datasize
n = 1e7
# dimensions
p = 5
# Product vector
phi = diag(c(0.9, 0.5, 0.1, 0.1, 0.1))
# Variance for Error
rho = 0.9
vec_omega = c(1, rho, rho^(2), rho^(3), rho^(4),
rho, 1, rho, rho^(2), rho^(3),
rho^(2), rho, 1, rho, rho^(2),
rho^(3), rho^(2), rho, 1, rho,
rho^(4), rho^(3), rho^(2), rho, 1)
omega = matrix(vec_omega, nrow = 5, byrow = TRUE)
eigen(omega)
vec_V = solve(diag(rep(1, p^(2))) - kronecker(phi,phi))%*%vec_omega
V = matrix(vec_V, nrow = 5, byrow = TRUE)
# Asymptotic variance
sig = solve(diag(rep(1,p)) - phi)%*%V + V%*%solve(diag(rep(1,p)) - phi) - V
# VAR process
err = mvrnorm(n, mu = c(0,0,0,0,0), Sigma = omega)
data = matrix(0, n, p)
data[1,] = c(1,1,1,1,1)
for (i in 2:n){
data[i,] = phi%*%data[i-1,] + err[i,]
}
head(data)
source("Gen_data.R")
library(MASS)
library(mcmcse)
library(ellipse)
library(mcmc)
library(HadamardR)
# datasize
n = 1e5
# dimensions
p = 8
# Product vector
rho = 0.95
phi = (1/p)*Hadamard_Matrix(p)%*%diag(rho^(1:p))%*%t(Hadamard_Matrix(p))
# Variance for Error
omega = diag(1, p)
data_g = function(number, dimension, rho){
phi = (1/dimension)*Hadamard_Matrix(dimension)%*%diag(rho^(1:dimension))%*%t(Hadamard_Matrix(dimension))
err = mvrnorm(number, mu = rep(0,dimension), Sigma = omega)
data = matrix(0, number, dimension)
data[1,] = rep(1,dimension)
for (i in 2:number){
data[i,] = t(phi)%*%data[i-1,] + err[i,]
}
return(data)
}
data_g(1e5,8,0.95)
# VAR process
#Asymptotic Variances
MAT = function(dimension, rho){
#Product Vector
phi = (1/dimension)*Hadamard_Matrix(dimension)%*%diag(rho^(1:dimension))%*%t(Hadamard_Matrix(dimension))
V = solve(diag(1,dimension) - phi%*%phi)%*%omega
sig = 2*solve(diag(1,p) - phi)%*%solve(diag(1,p) - phi%*%phi)%*%omega - solve(diag(1,p) - phi%*%phi)%*%omega
return(list(V, sig))
}
MAT(8,0.95)
MAT(8,0.95)[[1]]
det(MAT(8,0.95)[[1]])
setwd("/Users/arkabanerjee/Documents/GitHub/Efficient-Initial-Sequence-estimator")
source("Gen_data.R")
#Variables
num = 1e5
rho = 0.95
dim = 8
reps <- 100
# Initializing ESS
ess_bm = numeric(0)
ess_rbm = numeric(0)
ess_is = numeric(0)
ess_new = numeric(0)
# Initializing time
time_bm = numeric(0)
time_rbm = numeric(0)
time_is = numeric(0)
time_new = numeric(0)
for (j in 1:reps) {
print(j)
# VAR process
data = data_g(num,dim,rho)
print(paste(1))
# Batch means ESS and time
start <- Sys.time()
BM = mcse.multi(data, method = "bm", r = 3)$cov
time_rbm[j] = Sys.time() - start
ess_rbm[j] = multiESS(data, method = "bm", r = 3)
BM = mcse.multi(data, method = "bm", r = 1)$cov
time_bm[j] = Sys.time() - start
ess_bm[j] = multiESS(data, method = "bm", r = 1)
print(paste(2))
# ISE ESS and time
start = Sys.time()
IS = mcse.initseq(data)$cov
time_is[j] = Sys.time() - start
ess_is[j] = multiESS(data, covmat = IS)
print(paste(3))
# New variance ESS and time
start <- Sys.time()
BM = mcse.multi(data, method = "bm", r = 1)$cov
corrMat <- cov2cor(BM)
sds = apply(data, 2, function(l) sqrt(initseq(l)$var.pos))
var_est = diag(sds)%*%corrMat%*%diag(sds)
time_new[j] = Sys.time() - start
if(det(var_est) > 0){
ess_new[j] = multiESS(data, covmat = var_est)
}else{
ess_new[j] = 0
}
print(paste(4))
}
# Average ESS
mean(ess_bm); mean(ess_is); mean(ess_new)
foo <- cbind(ess_bm, ess_rbm,  ess_is, ess_new)
boxplot(foo, main = "Boxplot of estimated ESS")
abline(h = n*(det(MAT(8,0.95)[[1]])/det(MAT(8,0.95)[[2]]))^(1/p), col = "red")
# Average Time
mean(time_bm); mean(time_is); mean(time_new)
source("Gen_data.R")
# datasize
n = 1e5
source("Gen_data.R")
# datasize
n = 1e5
dim = 8
rho = 0.95
data = data_g(n, dim, rho)
# Batch means estimation
BME = mcse.multi(data, method = "bm", r = 3)
BME$cov
# ISE estimation
IS = mcse.initseq(data)
IS$cov
# correlation matrix by batch means
BM = cov2cor(mcse.multi(data, method = "bm", r = 1)$cov)
# Standard deviation bt ISE
sd = numeric(0)
for (i in 1:p) {
sd[i] = sqrt(initseq(data[,i])$var.pos)
}
# new variance estimate
var_est = diag(sd)%*%BM%*%diag(sd)
# Plots for 1st and 3rd component
new_v13 = matrix(c(var_est[1,1],var_est[1,p],var_est[p,1],var_est[p,p]),
byrow = TRUE, nrow = 2)
pl3 = ellipse(new_v13, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "pth Component")
ise13 = matrix(c(IS$cov[1,1],IS$cov[1,p],IS$cov[p,1],IS$cov[p,p]),
byrow = TRUE, nrow = 2)
pl2 = ellipse(ise13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl2, type = "l", col = "green", main = "Confidence Ellipsoid")
b13 = matrix(c(BME$cov[1,1],BME$cov[1,p],BME$cov[p,1],BME$cov[p,p]),
byrow = TRUE, nrow = 2)
pl1 = ellipse(b13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl1, type = "l", col = "red", main = "Confidence Ellipsoid")
tr13 = matrix(c(sig[1,1], sig[1,p], sig[p,1], sig[p,p]),
byrow = TRUE, nrow = 2)
pl0 = ellipse(tr13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl0, type = "l", col = "black", main = "Confidence Ellipsoid")
legend(x = "topleft", lty = c(1,1,1,1), text.font = 1,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
(MAT(dim, rho)[[2]])[c(1,dim),c(1,dim)]
tr13 = (MAT(dim, rho)[[2]])[c(1,dim),c(1,dim)] #matrix(c(sig[1,1], sig[1,p], sig[p,1], sig[p,p]),byrow = TRUE, nrow = 2)
pl0 = ellipse(tr13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl0, type = "l", col = "black", main = "Confidence Ellipsoid")
legend(x = "topleft", lty = c(1,1,1,1), text.font = 1,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
source("Gen_data.R")
# datasize
n = 1e5
dim = 8
rho = 0.95
data = data_g(n, dim, rho)
# Batch means estimation
BME = mcse.multi(data, method = "bm", r = 3)
BME$cov
# ISE estimation
IS = mcse.initseq(data)
IS$cov
# correlation matrix by batch means
BM = cov2cor(mcse.multi(data, method = "bm", r = 1)$cov)
# Standard deviation bt ISE
sd = numeric(0)
for (i in 1:p) {
sd[i] = sqrt(initseq(data[,i])$var.pos)
}
# new variance estimate
var_est = diag(sd)%*%BM%*%diag(sd)
# Plots for 1st and 3rd component
new_v13 = matrix(c(var_est[1,1],var_est[1,p],var_est[p,1],var_est[p,p]),
byrow = TRUE, nrow = 2)
pl3 = ellipse(new_v13, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = "pth Component")
ise13 = matrix(c(IS$cov[1,1],IS$cov[1,p],IS$cov[p,1],IS$cov[p,p]),
byrow = TRUE, nrow = 2)
pl2 = ellipse(ise13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl2, type = "l", col = "green", main = "Confidence Ellipsoid")
b13 = matrix(c(BME$cov[1,1],BME$cov[1,p],BME$cov[p,1],BME$cov[p,p]),
byrow = TRUE, nrow = 2)
pl1 = ellipse(b13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl1, type = "l", col = "red", main = "Confidence Ellipsoid")
tr13 = (MAT(dim, rho)[[2]])[c(1,dim),c(1,dim)] #matrix(c(sig[1,1], sig[1,p], sig[p,1], sig[p,p]),byrow = TRUE, nrow = 2)
pl0 = ellipse(tr13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl0, type = "l", col = "black", main = "Confidence Ellipsoid")
legend(x = "topleft", lty = c(1,1,1,1), text.font = 1,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
# Plots for 1st and 3rd component
new_v13 = var_est[c(1,dim), c(1,dim)]
pl3 = ellipse(new_v13, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = expression(p, paste("th Component")))
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = expression(dim, paste("th Component")))
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = paste(dim,"th Component"))
ise13 = IS$cov[c(1,dim), c(1,dim)]
pl2 = ellipse(ise13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl2, type = "l", col = "green", main = "Confidence Ellipsoid")
b13 = BME$cov[c(1,dim), c(1,dim)]
pl1 = ellipse(b13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl1, type = "l", col = "red", main = "Confidence Ellipsoid")
tr13 = (MAT(dim, rho)[[2]])[c(1,dim),c(1,dim)]
pl0 = ellipse(tr13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl0, type = "l", col = "black", main = "Confidence Ellipsoid")
legend(x = "topleft", lty = c(1,1,1,1), text.font = 1,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
legend(x = "topleft", lty = c(1,1,1,1), text.font = 0.5,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
# Plots for 1st and 3rd component
new_v13 = var_est[c(1,dim), c(1,dim)]
pl3 = ellipse(new_v13, centre = c(0,0), which = c(1, 2), npoints = 100)
plot(pl3, type = "l", col = "blue", main = "Confidence Ellipsoid",
xlab = "1st Component", ylab = paste(dim,"th Component"))
ise13 = IS$cov[c(1,dim), c(1,dim)]
pl2 = ellipse(ise13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl2, type = "l", col = "green", main = "Confidence Ellipsoid")
b13 = BME$cov[c(1,dim), c(1,dim)]
pl1 = ellipse(b13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl1, type = "l", col = "red", main = "Confidence Ellipsoid")
tr13 = (MAT(dim, rho)[[2]])[c(1,dim),c(1,dim)]
pl0 = ellipse(tr13, centre = c(0,0), which = c(1, 2), npoints = 100)
lines(pl0, type = "l", col = "black", main = "Confidence Ellipsoid")
legend(x = "topleft", lty = c(1,1,1,1), text.font = 0.5,
col= c("blue","green", "red", "black"),text.col = "blue",
legend=c("New", "ISE", "Lugsail BM", "True"))
legend(x = "topleft", lty = c(1,1,1,1), text.font = 0.5,
col= c("blue","green", "red", "black"),text.col = "black",
legend=c("New", "ISE", "Lugsail BM", "True"))
