
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(100)
> source("Coverage_func.R")
Registered S3 methods overwritten by 'RcppEigen':
  method               from         
  predict.fastLm       RcppArmadillo
  print.fastLm         RcppArmadillo
  summary.fastLm       RcppArmadillo
  print.summary.fastLm RcppArmadillo

Attaching package: ‘RcppEigen’

The following objects are masked from ‘package:RcppArmadillo’:

    fastLm, fastLmPure

> 
> library(foreach)
> library(doParallel)
Loading required package: iterators

Attaching package: ‘iterators’

The following object is masked from ‘package:HadamardR’:

    nextElem

Loading required package: parallel
> 
> 
> 
> B <- 1000
> #p <- 10
> #rho <- 0.99
> #phi <- diag(rep(rho,p))
> #omega <- matrix(.9, nrow = p, ncol = p)
> #diag(omega) <- 1
> #omega <- omega^(abs(col(omega)-row(omega)))
> subsize <- c(5e3, 8e3, 1e4, 3e4, 5e4, 8e4, 1e5, 3e5, 5e5)
> level <- 0.95
> Coverage = matrix(0, nrow = length(subsize), ncol = 6)
> Timer = matrix(0, nrow = length(subsize), ncol = 6)
> #length(colMeans(minichain))
> 
> parallel::detectCores()
[1] 64
> n.cores <- parallel::detectCores() - 4
> doParallel::registerDoParallel(cores = n.cores)
> 
> 
> cover = foreach(j = 1:B, .packages = c("mcmcse"))%dopar%{
+ 	print(j)
+ 	Out = list()
+ 	time = list()
+ 	cover = coverage(subsize, phi, omega, level)
+ 	cover
+ }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 30
[1] 29
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 78
[1] 73
[1] 92
[1] 105
[1] 75
[1] 86
[1] 67
[1] 71
[1] 100
[1] 65
[1] 88
[1] 120
[1] 74
[1] 99
[1] 63
[1] 97
[1] 117
[1] 89
[1] 76
[1] 69
[1] 108
[1] 77
[1] 95
[1] 118
[1] 61
[1] 111
[1] 106
[1] 62
[1] 80
[1] 98
[1] 72
[1] 103
[1] 83
[1] 115
[1] 68
[1] 119
[1] 114
[1] 104
[1] 102
[1] 107
[1] 109
[1] 82
[1] 110
[1] 79
[1] 91
[1] 70
[1] 84
[1] 64
[1] 112
[1] 87
[1] 96
[1] 85
[1] 101
[1] 113
[1] 93
[1] 66
[1] 116
[1] 81
[1] 133
[1] 94
[1] 152
[1] 90
[1] 160
[1] 165
[1] 135
[1] 131
[1] 121
[1] 157
[1] 125
[1] 138
[1] 146
[1] 127
[1] 134
[1] 132
[1] 159
[1] 149
[1] 168
[1] 130
[1] 137
[1] 136
[1] 162
[1] 174
[1] 171
[1] 148
[1] 144
[1] 164
[1] 155
[1] 122
[1] 175
[1] 128
[1] 129
[1] 170
[1] 169
[1] 140
[1] 147
[1] 167
[1] 163
[1] 179
[1] 178
[1] 139
[1] 158
[1] 217
[1] 143
[1] 126
[1] 124
[1] 193
[1] 141
[1] 181
[1] 151
[1] 153
[1] 166
[1] 154
[1] 191
[1] 177
[1] 172
[1] 150
[1] 220
[1] 176
[1] 123
[1] 142
[1] 156
[1] 161
[1] 173
[1] 195
[1] 212
[1] 180
[1] 145
[1] 225
[1] 206
[1] 198
[1] 192
[1] 185
[1] 277
[1] 194
[1] 204
[1] 187
[1] 197
[1] 219
[1] 196
[1] 234
[1] 241
[1] 209
[1] 189
[1] 224
[1] 207
[1] 215
[1] 222
[1] 251
[1] 231
[1] 188
[1] 218
[1] 208
[1] 200
[1] 199
[1] 230
[1] 182
[1] 184
[1] 228
[1] 235
[1] 190
[1] 223
[1] 186
[1] 238
[1] 239
[1] 229
[1] 203
[1] 211
[1] 227
[1] 213
[1] 237
[1] 253
[1] 236
[1] 232
[1] 221
[1] 266
[1] 280
[1] 245
[1] 233
[1] 226
[1] 201
[1] 240
[1] 214
[1] 216
[1] 205
[1] 183
[1] 301
[1] 285
[1] 210
[1] 272
[1] 255
[1] 284
[1] 202
[1] 247
[1] 259
[1] 337
[1] 252
[1] 279
[1] 260
[1] 256
[1] 258
[1] 257
[1] 254
[1] 264
[1] 291
[1] 294
[1] 269
[1] 268
[1] 326
[1] 248
[1] 267
[1] 274
[1] 249
[1] 311
[1] 246
[1] 288
[1] 289
[1] 263
[1] 275
[1] 250
[1] 244
[1] 313
[1] 278
[1] 287
[1] 298
[1] 292
[1] 361
[1] 242
[1] 283
[1] 295
[1] 296
[1] 281
[1] 299
[1] 315
[1] 282
[1] 276
[1] 271
[1] 273
[1] 290
[1] 261
[1] 340
[1] 293
[1] 262
[1] 319
[1] 305
[1] 265
[1] 286
[1] 243
[1] 345
[1] 300
[1] 270
[1] 297
[1] 307
[1] 344
[1] 386
[1] 354
[1] 312
[1] 397
[1] 332
[1] 316
[1] 339
[1] 328
[1] 327
[1] 308
[1] 318
[1] 347
[1] 329
[1] 314
[1] 320
[1] 349
[1] 317
[1] 351
[1] 334
[1] 373
[1] 309
[1] 310
[1] 421
[1] 304
[1] 323
[1] 348
[1] 371
[1] 355
[1] 322
[1] 405
[1] 358
[1] 324
[1] 343
[1] 342
[1] 350
[1] 375
[1] 352
[1] 379
[1] 333
[1] 335
[1] 356
[1] 359
[1] 302
[1] 338
[1] 306
[1] 446
[1] 400
[1] 414
[1] 321
[1] 336
[1] 365
[1] 303
[1] 353
[1] 346
[1] 388
[1] 325
[1] 360
[1] 367
[1] 331
[1] 387
[1] 341
[1] 465
[1] 392
[1] 404
[1] 357
[1] 330
[1] 380
[1] 374
[1] 376
[1] 457
[1] 399
[1] 389
[1] 407
[1] 506
[1] 378
[1] 408
[1] 370
[1] 409
[1] 368
[1] 369
[1] 481
[1] 384
[1] 433
[1] 372
[1] 412
[1] 377
[1] 419
[1] 395
[1] 382
[1] 435
[1] 394
[1] 383
[1] 381
[1] 393
[1] 525
[1] 364
[1] 452
[1] 410
[1] 403
[1] 402
[1] 418
[1] 431
[1] 460
[1] 406
[1] 398
[1] 415
[1] 448
[1] 366
[1] 425
[1] 411
[1] 439
[1] 362
[1] 416
[1] 396
[1] 401
[1] 420
[1] 566
[1] 474
[1] 427
[1] 447
[1] 413
[1] 385
[1] 363
[1] 417
[1] 464
[1] 434
[1] 449
[1] 436
[1] 517
[1] 391
[1] 440
[1] 468
[1] 512
[1] 585
[1] 429
[1] 390
[1] 459
[1] 430
[1] 467
[1] 469
[1] 438
[1] 493
[1] 428
[1] 495
[1] 458
[1] 437
[1] 472
[1] 432
[1] 426
[1] 444
[1] 541
[1] 441
[1] 479
[1] 626
[1] 520
[1] 462
[1] 442
[1] 454
[1] 453
[1] 471
[1] 455
[1] 475
[1] 496
[1] 470
[1] 466
[1] 485
[1] 508
[1] 478
[1] 422
[1] 443
[1] 534
[1] 456
[1] 507
[1] 424
[1] 476
[1] 473
[1] 491
[1] 577
[1] 477
[1] 445
[1] 487
[1] 423
[1] 572
[1] 499
[1] 463
[1] 686
[1] 461
[1] 494
[1] 451
[1] 524
[1] 480
[1] 500
[1] 489
[1] 509
[1] 645
[1] 528
[1] 490
[1] 529
[1] 519
[1] 527
[1] 568
[1] 450
[1] 486
[1] 497
[1] 501
[1] 514
[1] 539
[1] 553
[1] 518
[1] 580
[1] 504
[1] 488
[1] 637
[1] 522
[1] 498
[1] 556
[1] 515
[1] 532
[1] 513
[1] 538
[1] 545
[1] 555
[1] 530
[1] 601
[1] 531
[1] 526
[1] 492
[1] 746
[1] 567
[1] 503
[1] 482
[1] 502
[1] 535
[1] 516
[1] 551
[1] 547
[1] 587
[1] 505
[1] 537
[1] 484
[1] 594
[1] 559
[1] 554
[1] 533
[1] 549
[1] 483
[1] 628
[1] 540
[1] 705
[1] 632
[1] 523
[1] 536
[1] 584
[1] 521
[1] 550
[1] 511
[1] 589
[1] 574
[1] 510
[1] 560
[1] 569
[1] 806
[1] 588
[1] 557
[1] 546
[1] 613
[1] 599
[1] 582
[1] 578
[1] 661
[1] 548
[1] 697
[1] 564
[1] 575
[1] 598
[1] 542
[1] 579
[1] 765
[1] 640
[1] 605
[1] 592
[1] 562
[1] 558
[1] 573
[1] 627
[1] 561
[1] 591
[1] 688
[1] 590
[1] 552
[1] 586
[1] 593
[1] 576
[1] 565
[1] 611
[1] 595
[1] 563
[1] 544
[1] 614
[1] 615
[1] 607
[1] 692
[1] 609
[1] 597
[1] 647
[1] 634
[1] 866
[1] 721
[1] 644
[1] 619
[1] 616
[1] 581
[1] 600
[1] 571
[1] 596
[1] 606
[1] 654
[1] 825
[1] 610
[1] 620
[1] 659
[1] 583
[1] 543
[1] 570
[1] 642
[1] 649
[1] 648
[1] 617
[1] 636
[1] 624
[1] 658
[1] 629
[1] 635
[1] 757
[1] 926
[1] 673
[1] 700
[1] 633
[1] 618
[1] 608
[1] 602
[1] 612
[1] 638
[1] 671
[1] 748
[1] 651
[1] 639
[1] 781
[1] 752
[1] 646
[1] 653
[1] 604
[1] 655
[1] 622
[1] 687
[1] 667
[1] 652
[1] 621
[1] 625
[1] 694
[1] 674
[1] 675
[1] 623
[1] 657
[1] 650
[1] 704
[1] 885
[1] 643
[1] 679
[1] 696
[1] 707
[1] 665
[1] 631
[1] 714
[1] 676
[1] 669
[1] 680
[1] 660
[1] 641
[1] 719
[1] 666
[1] 718
[1] 986
[1] 630
[1] 709
[1] 656
[1] 603
[1] 689
[1] 808
[1] 670
[1] 708
[1] 684
[1] 695
[1] 672
[1] 841
[1] 662
[1] 760
[1] 677
[1] 668
[1] 733
[1] 702
[1] 698
[1] 693
[1] 678
[1] 812
[1] 706
[1] 731
[1] 703
[1] 817
[1] 711
[1] 715
[1] 699
[1] 734
[1] 727
[1] 681
[1] 664
[1] 754
[1] 712
[1] 945
[1] 774
[1] 868
[1] 747
[1] 764
[1] 682
[1] 725
[1] 769
[1] 739
[1] 685
[1] 710
[1] 713
[1] 701
[1] 736
[1] 691
[1] 726
[1] 717
[1] 722
[1] 683
[1] 735
[1] 767
[1] 756
[1] 740
[1] 729
[1] 720
[1] 716
[1] 690
[1] 779
[1] 778
[1] 730
[1] 749
[1] 762
[1] 820
[1] 732
[1] 663
[1] 755
[1] 744
[1] 829
[1] 807
[1] 768
[1] 872
[1] 793
[1] 728
[1] 901
[1] 787
[1] 737
[1] 759
[1] 766
[1] 763
[1] 928
[1] 782
[1] 738
[1] 753
[1] 877
[1] 741
[1] 791
[1] 775
[1] 758
[1] 785
[1] 770
[1] 771
[1] 724
[1] 824
[1] 772
[1] 761
[1] 889
[1] 742
[1] 834
[1] 814
[1] 786
[1] 796
[1] 847
[1] 815
[1] 773
[1] 794
[1] 743
[1] 751
[1] 745
[1] 799
[1] 777
[1] 789
[1] 822
[1] 750
[1] 780
[1] 776
[1] 839
[1] 790
[1] 795
[1] 988
[1] 838
[1] 880
[1] 851
[1] 827
[1] 809
[1] 830
[1] 792
[1] 788
[1] 867
[1] 961
[1] 853
[1] 819
[1] 816
[1] 723
[1] 797
[1] 828
[1] 823
[1] 804
[1] 907
[1] 800
[1] 932
[1] 813
[1] 875
[1] 826
[1] 842
[1] 798
[1] 831
[1] 949
[1] 835
[1] 784
[1] 845
[1] 802
[1] 911
[1] 801
[1] 832
[1] 821
[1] 890
[1] 937
[1] 874
[1] 884
[1] 894
[1] 836
[1] 846
[1] 818
[1] 803
[1] 859
[1] 854
[1] 887
[1] 833
[1] 811
[1] 805
[1] 837
[1] 967
[1] 888
[1] 899
[1] 840
[1] 856
[1] 940
[1] 935
[1] 849
[1] 848
[1] 852
[1] 882
[1] 869
[1] 855
[1] 927
[1] 864
[1] 898
[1] 850
[1] 783
[1] 876
[1] 857
[1] 971
[1] 902
[1] 810
[1] 891
[1] 860
[1] 873
[1] 879
[1] 883
[1] 878
[1] 950
[1] 913
[1] 992
[1] 914
[1] 895
[1] 844
[1] 995
[1] 947
[1] 886
[1] 948
[1] 944
[1] 954
[1] 862
[1] 892
[1] 997
[1] 858
[1] 906
[1] 942
[1] 919
[1] 916
[1] 896
[1] 905
[1] 934
[1] 909
[1] 897
[1] 861
[1] 917
[1] 871
[1] 951
[1] 881
[1] 1000
[1] 959
[1] 915
[1] 893
[1] 863
[1] 987
[1] 900
[1] 865
[1] 912
[1] 974
[1] 929
[1] 920
[1] 936
[1] 910
[1] 933
[1] 924
[1] 958
[1] 870
[1] 955
[1] 966
[1] 943
[1] 979
[1] 843
[1] 908
[1] 962
[1] 904
[1] 969
[1] 952
[1] 938
[1] 973
[1] 939
[1] 994
[1] 946
[1] 977
[1] 922
[1] 957
[1] 976
[1] 923
[1] 960
[1] 980
[1] 972
[1] 956
[1] 925
[1] 921
[1] 965
[1] 953
[1] 918
[1] 975
[1] 931
[1] 989
[1] 970
[1] 941
[1] 998
[1] 984
[1] 903
[1] 993
[1] 996
[1] 968
[1] 983
[1] 999
[1] 930
[1] 985
[1] 982
[1] 964
[1] 991
[1] 981
[1] 978
[1] 963
[1] 990
> #chart <- Out/B
> #chart
> #time
> #cover
> 
> #for(i in 1:B){
> #	Coverage = Coverage + cover[[i]][[1]]
> #	Timer = Timer + cover[[i]][[2]]
> #}
> 
> save(cover, subsize, B, file = "dat_matices.Rdata")
> 
> #save("coverage table" = chart, file = "Coverage.Rdata")
> 
> proc.time()
      user     system    elapsed 
233046.042   2320.718   4249.261 
