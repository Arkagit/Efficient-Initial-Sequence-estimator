
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(100)
> 
> #### Calling libraries
> library(mcmcse)
> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> 
> #### Sourcing function and data files
> source("VAR_ess.R")
Registered S3 methods overwritten by 'RcppEigen':
  method               from         
  predict.fastLm       RcppArmadillo
  print.fastLm         RcppArmadillo
  summary.fastLm       RcppArmadillo
  print.summary.fastLm RcppArmadillo

Attaching package: ‘RcppEigen’

The following objects are masked from ‘package:RcppArmadillo’:

    fastLm, fastLmPure

> source("../VAR_func.R")
> source("../Asymp_var.R")

Attaching package: ‘HadamardR’

The following object is masked from ‘package:iterators’:

    nextElem

> 
> # Initializing variable values
> N <- 5e5
> nloops <- 50
> subsize <- floor(seq(1e4, N, length = nloops))
> B <- 10
> truth <- true.sig.gen(p = p, omega = omega, phi = phi)
> ess_true <- (det(truth$tar.var)/det(truth$final.cov))^(1/p)
> 
> 
> ########### Initializing Output list
> Table = list()
> 
> ########### Setting up parallel programming config
> parallel::detectCores()
[1] 64
> n.cores <- parallel::detectCores() - 1
> doParallel::registerDoParallel(cores = n.cores)
> 
> 
> 
> # For loop for getting ESS and norm values corresponding to different chain sizes
> Table = foreach(b=1:B, .packages = c("mcmcse"))%dopar%{
+ 	#if(b %% 1 ==0) print(b)
+ 	chain <- var1(p = p, phi = phi, nsim = max(subsize), omega = omega)
+ 	combine = list()
+ 	for(j in 1:length(subsize)){
+ 		print(j)
+ 		minichain <- chain[1:subsize[j], ]
+ 		ess_track <- var_track(minichain)
+ 
+ 		ess_track_bm <- multiESS(minichain, covmat = ess_track$bm_est)/subsize[j]
+ 		#ess_track_lug <- multiESS(minichain, covmat = ess_track$lug_est)/subsize[j]
+ 		ess_track_ise <- multiESS(minichain, covmat = ess_track$ise_est)/subsize[j]
+ 		ess_track_cc <- multiESS(minichain, covmat = ess_track$cc_est)/subsize[j]
+ 		ess_track_sve <- multiESS(minichain, covmat = ess_track$sve_est)/subsize[j]
+ 		ess_track_mls <- multiESS(minichain, covmat = ess_track$mls_est)/subsize[j]
+ 
+ 		ess_list = list(ess_track_bm, ess_track_ise, ess_track_cc,
+ 			ess_track_sve, ess_track_mls)
+ 
+ 
+ 		fro_track_bm <- norm(ess_track$bm_est, type = "F")/norm(truth$final.cov, type = "F")
+ 		#fro_track_lug <- norm(ess_track$lug_est, type = "F")/norm(truth$final.cov, type = "F")
+ 		fro_track_ise <- norm(ess_track$ise_est, type = "F")/norm(truth$final.cov, type = "F")
+ 		fro_track_cc <- norm(ess_track$cc_est, type = "F")/norm(truth$final.cov, type = "F")
+ 		fro_track_sve <- norm(ess_track$sve_est, type = "F")/norm(truth$final.cov, type = "F")
+ 		fro_track_mls <- norm(ess_track$mls_est, type = "F")/norm(truth$final.cov, type = "F")
+ 
+ 		frob_list = list(fro_track_bm, fro_track_ise, fro_track_cc,
+ 			fro_track_sve, fro_track_mls)
+ 
+ 		m_list = list(ess_list, frob_list)
+ 
+ 		combine = append(combine, list(m_list))
+ 	}	
+ 
+ 	combine
+ 	#ess_list
+ }
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 1
[1] 2
[1] 2
[1] 2
[1] 2
[1] 2
[1] 2
[1] 2
[1] 2
[1] 2
[1] 2
[1] 3
[1] 3
[1] 3
[1] 3
[1] 3
[1] 3
[1] 3
[1] 3
[1] 3
[1] 3
[1] 4
[1] 4
[1] 4
[1] 4
[1] 4
[1] 4
[1] 4
[1] 4
[1] 4
[1] 4
[1] 5
[1] 5
[1] 5
[1] 5
[1] 5
[1] 5
[1] 5
[1] 5
[1] 5
[1] 5
[1] 6
[1] 6
[1] 6
[1] 6
[1] 6
[1] 6
[1] 6
[1] 6
[1] 6
[1] 6
[1] 7
[1] 7
[1] 7
[1] 7
[1] 7
[1] 7
[1] 7
[1] 7
[1] 7
[1] 7
[1] 8
[1] 8
[1] 8
[1] 8
[1] 8
[1] 8
[1] 8
[1] 8
[1] 8
[1] 8
[1] 9
[1] 9
[1] 9
[1] 9
[1] 9
[1] 9
[1] 9
[1] 9
[1] 9
[1] 9
[1] 10
[1] 10
[1] 10
[1] 10
[1] 10
[1] 10
[1] 10
[1] 10
[1] 10
[1] 10
[1] 11
[1] 11
[1] 11
[1] 11
[1] 11
[1] 11
[1] 11
[1] 11
[1] 11
[1] 11
[1] 12
[1] 12
[1] 12
[1] 12
[1] 12
[1] 12
[1] 12
[1] 12
[1] 12
[1] 12
[1] 13
[1] 13
[1] 13
[1] 13
[1] 13
[1] 13
[1] 13
[1] 13
[1] 13
[1] 14
[1] 14
[1] 14
[1] 13
[1] 14
[1] 14
[1] 14
[1] 14
[1] 14
[1] 14
[1] 15
[1] 15
[1] 15
[1] 14
[1] 15
[1] 15
[1] 15
[1] 15
[1] 15
[1] 15
[1] 16
[1] 16
[1] 16
[1] 15
[1] 16
[1] 16
[1] 16
[1] 16
[1] 16
[1] 17
[1] 16
[1] 17
[1] 17
[1] 17
[1] 16
[1] 17
[1] 17
[1] 17
[1] 17
[1] 18
[1] 18
[1] 18
[1] 17
[1] 18
[1] 17
[1] 18
[1] 18
[1] 18
[1] 19
[1] 18
[1] 19
[1] 19
[1] 18
[1] 19
[1] 18
[1] 19
[1] 19
[1] 20
[1] 19
[1] 19
[1] 20
[1] 20
[1] 19
[1] 20
[1] 20
[1] 19
[1] 20
[1] 21
[1] 20
[1] 20
[1] 21
[1] 21
[1] 20
[1] 21
[1] 21
[1] 21
[1] 22
[1] 20
[1] 21
[1] 22
[1] 21
[1] 22
[1] 22
[1] 21
[1] 23
[1] 22
[1] 22
[1] 21
[1] 22
[1] 23
[1] 23
[1] 22
[1] 23
[1] 22
[1] 24
[1] 23
[1] 23
[1] 24
[1] 23
[1] 22
[1] 24
[1] 23
[1] 24
[1] 23
[1] 25
[1] 24
[1] 25
[1] 24
[1] 24
[1] 25
[1] 23
[1] 24
[1] 25
[1] 24
[1] 26
[1] 26
[1] 25
[1] 26
[1] 25
[1] 25
[1] 24
[1] 26
[1] 25
[1] 25
[1] 27
[1] 27
[1] 27
[1] 26
[1] 26
[1] 26
[1] 27
[1] 25
[1] 26
[1] 28
[1] 26
[1] 28
[1] 28
[1] 27
[1] 27
[1] 27
[1] 28
[1] 26
[1] 27
[1] 29
[1] 27
[1] 29
[1] 29
[1] 28
[1] 29
[1] 28
[1] 28
[1] 27
[1] 28
[1] 30
[1] 28
[1] 30
[1] 30
[1] 30
[1] 29
[1] 29
[1] 29
[1] 28
[1] 29
[1] 31
[1] 29
[1] 31
[1] 31
[1] 31
[1] 30
[1] 30
[1] 30
[1] 32
[1] 29
[1] 30
[1] 30
[1] 32
[1] 32
[1] 32
[1] 31
[1] 31
[1] 31
[1] 33
[1] 30
[1] 31
[1] 33
[1] 31
[1] 33
[1] 33
[1] 32
[1] 32
[1] 32
[1] 34
[1] 31
[1] 32
[1] 34
[1] 32
[1] 34
[1] 34
[1] 33
[1] 35
[1] 33
[1] 33
[1] 35
[1] 32
[1] 35
[1] 33
[1] 33
[1] 35
[1] 34
[1] 36
[1] 34
[1] 34
[1] 36
[1] 36
[1] 34
[1] 33
[1] 34
[1] 36
[1] 35
[1] 37
[1] 35
[1] 35
[1] 37
[1] 37
[1] 35
[1] 34
[1] 35
[1] 37
[1] 36
[1] 38
[1] 36
[1] 36
[1] 38
[1] 38
[1] 36
[1] 35
[1] 36
[1] 38
[1] 39
[1] 37
[1] 37
[1] 37
[1] 39
[1] 39
[1] 37
[1] 36
[1] 37
[1] 40
[1] 39
[1] 38
[1] 40
[1] 38
[1] 38
[1] 40
[1] 38
[1] 37
[1] 41
[1] 40
[1] 38
[1] 39
[1] 41
[1] 39
[1] 39
[1] 41
[1] 39
[1] 42
[1] 38
[1] 40
[1] 41
[1] 39
[1] 42
[1] 40
[1] 40
[1] 42
[1] 40
[1] 43
[1] 40
[1] 42
[1] 41
[1] 39
[1] 43
[1] 41
[1] 43
[1] 41
[1] 41
[1] 44
[1] 43
[1] 42
[1] 40
[1] 41
[1] 44
[1] 44
[1] 42
[1] 42
[1] 42
[1] 45
[1] 44
[1] 43
[1] 42
[1] 45
[1] 41
[1] 45
[1] 43
[1] 43
[1] 43
[1] 46
[1] 45
[1] 44
[1] 43
[1] 46
[1] 42
[1] 46
[1] 44
[1] 44
[1] 44
[1] 47
[1] 46
[1] 45
[1] 47
[1] 44
[1] 47
[1] 43
[1] 45
[1] 45
[1] 45
[1] 48
[1] 47
[1] 48
[1] 45
[1] 46
[1] 48
[1] 44
[1] 46
[1] 46
[1] 46
[1] 49
[1] 48
[1] 49
[1] 47
[1] 49
[1] 46
[1] 45
[1] 47
[1] 47
[1] 47
[1] 50
[1] 49
[1] 50
[1] 48
[1] 50
[1] 47
[1] 48
[1] 46
[1] 48
[1] 48
[1] 50
[1] 49
[1] 48
[1] 47
[1] 49
[1] 49
[1] 49
[1] 50
[1] 49
[1] 50
[1] 48
[1] 50
[1] 50
[1] 50
[1] 49
[1] 50
> 
> ############ Saving The List
> save(Table, subsize, ess_true, truth, nloops, B, file = "ESS_data_2.Rdata")
> 
> proc.time()
    user   system  elapsed 
3497.826  104.131  451.496 
