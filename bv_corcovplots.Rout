
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ############################################################
> ####Coverage vs Comp Time################################### 
> source("Examples/VAR_1.01/VAR_func.R")
> source("Examples/VAR_1.01/Asymp_var.R")
> 
> load("Examples/VAR_1.01/Results/dat_matices.Rdata")
> 
> add_legend <- function(...) {
+   opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), 
+     mar=c(0, 0, 0, 0), new=TRUE)
+   on.exit(par(opar))
+   plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')
+   legend(...)
+ }
> 
> truth <- true.sig.gen(p = p, omega = omega, phi = phi)
> 
> nloops = length(subsize)
> 
> 
> chart = matrix(0, nrow = length(subsize), ncol = 5)
> time = matrix(0, nrow = length(subsize), ncol = 5)
> 
> time_track_bm = matrix(0, nrow = B, ncol = nloops)
> time_track_ise = matrix(0, nrow = B, ncol = nloops)
> time_track_cc = matrix(0, nrow = B, ncol = nloops)
> time_track_sve = matrix(0, nrow = B, ncol = nloops)
> time_track_mls = matrix(0, nrow = B, ncol = nloops)
> 
> se_time_bm <- numeric(length(subsize))
> se_time_ise <- numeric(length(subsize))
> se_time_cc <- numeric(length(subsize))
> se_time_sve <- numeric(length(subsize))
> se_time_mls <- numeric(length(subsize))
> 
> for(i in 1:B){
+   chart = chart + (cover[[i]]$count_mat)/B
+   time = time + log(cover[[i]]$Time)/(log(10)*B)
+   for(j in 1:length(subsize)){
+     time_track_bm[i,j] = log(cover[[i]]$Time[j,1])/log(10)
+     time_track_ise[i,j] = log(cover[[i]]$Time[j,2])/log(10)
+     time_track_cc[i,j] = log(cover[[i]]$Time[j,3])/log(10)
+     time_track_sve[i,j] = log(cover[[i]]$Time[j,4])/log(10)
+     time_track_mls[i,j] = log(cover[[i]]$Time[j,5])/log(10)
+   }
+ }
> 
> se_time_bm <- apply(time_track_bm, 2, sd)/sqrt(B)
> se_time_ise <- apply(time_track_ise, 2, sd)/sqrt(B)
> se_time_cc <- apply(time_track_cc, 2, sd)/sqrt(B)
> se_time_sve <- apply(time_track_sve, 2, sd)/sqrt(B)
> se_time_mls <- apply(time_track_mls, 2, sd)/sqrt(B)
> chart;time
         BM   ISE New ISE (Geyer)   SVE New ISE (MLS)
5000  0.436 0.613           0.704 0.535         0.611
8000  0.594 0.715           0.832 0.667         0.761
10000 0.661 0.776           0.869 0.744         0.821
30000 0.822 0.875           0.943 0.868         0.915
50000 0.865 0.913           0.960 0.905         0.949
80000 0.884 0.915           0.959 0.907         0.946
1e+05 0.892 0.913           0.953 0.910         0.945
3e+05 0.913 0.927           0.952 0.923         0.938
5e+05 0.924 0.937           0.961 0.933         0.949
            [,1]       [,2]       [,3]        [,4]       [,5]
 [1,] -2.0907555 -0.7700876 -1.6091087 -1.76677989 0.09215394
 [2,] -2.0091427 -0.4739837 -1.4523217 -1.62383111 0.10574681
 [3,] -1.9517689 -0.3340704 -1.3793013 -1.54128426 0.11530485
 [4,] -1.5980344  0.3147007 -0.9204954 -1.09615852 0.20414817
 [5,] -1.4053472  0.6065774 -0.6562340 -0.85424476 0.28237698
 [6,] -1.3415588  0.8646050 -0.4516272 -0.57012975 0.37872563
 [7,] -1.3093697  0.9866084 -0.3397413 -0.49762297 0.44231206
 [8,] -1.0579157  1.5709381  0.3261352  0.09525751 0.92134792
 [9,] -0.9001876  1.8356158  0.5870619  0.33309914 1.18241720
> 
> 
> 
> 
> add_legend <- function(...) {
+   opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), 
+     mar=c(0, 0, 0, 0), new=TRUE)
+   on.exit(par(opar))
+   plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')
+   legend(...)
+ }
> 
> #time = log(time)/ log(10)
> 
> pdf("Plots/coverage_time1.pdf", height = 6, width = 8)
> par(mar = c(5.1, 4.8, 4.1, 2.1))
> plot(chart[,1], time[,1], xlim = c(0.43, 1), ylim = c(-2, 2),type = 'b', xlab = "Coverage",
+ 	ylab = "log(Time)", pch = 1:dim(time)[1])
> lines(chart[,2], time[,2],type = 'b', col = "red", pch = 1:dim(time)[1])
> lines(chart[,3], time[,3],type = 'b', col = "purple", pch = 1:dim(time)[1])
> lines(chart[,4], time[,4],type = 'b', col = "skyblue", pch = 1:dim(time)[1])
> lines(chart[,5], time[,5],type = 'b', col = "brown", pch = 1:dim(time)[1])
> legend("topleft", legend = subsize,
+        lwd = 1, cex = 0.75, col = "black", pch = 1:(dim(time)[1]))
> 
> add_legend("topright", bty = "n", legend = c("BM", "CC - ISE", "mISE", "SVE", "CC - MLS"), 
+ 	col = c("black", "purple", "red", "skyblue", "brown"), lty = 1, cex=0.65)
> dev.off()
null device 
          1 
> 
> ############################################################
> ###ESS Plot############################################ 
> source("Examples/VAR_1.01/VAR_func.R")
> source("Examples/VAR_1.01/Asymp_var.R")
> 
> load("Examples/VAR_1.01/Results/dat_matices.Rdata")
> 
> 
> add_legend <- function(...) {
+   opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), 
+     mar=c(0, 0, 0, 0), new=TRUE)
+   on.exit(par(opar))
+   plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')
+   legend(...)
+ }
> 
> ess_true <- (det(true.sig.gen(p = p, omega = omega, phi = phi)$tar.var)/det(true.sig.gen(p = p, omega = omega, phi = phi)$final.cov))^(1/p)
> ess_true
[1] 0.02630116
> nloops = length(subsize)
> names = subsize
> 
> ess_track_bm = matrix(0, nrow = B, ncol = nloops)
> ess_track_ise = matrix(0, nrow = B, ncol = nloops)
> ess_track_cc = matrix(0, nrow = B, ncol = nloops)
> ess_track_sve = matrix(0, nrow = B, ncol = nloops)
> ess_track_mls = matrix(0, nrow = B, ncol = nloops)
> 
> se_ess_bm <- numeric(length(subsize))
> se_ess_ise <- numeric(length(subsize))
> se_ess_cc <- numeric(length(subsize))
> se_ess_sve <- numeric(length(subsize))
> se_ess_mls <- numeric(length(subsize))
> 
> for(i in 1:B){
+   for(j in 1:nloops){
+     ess_track_bm[i,j] = cover[[i]]$ESS[[5*(j-1) + 1]]/subsize[j]
+     ess_track_ise[i,j] = cover[[i]]$ESS[[5*(j-1) + 2]]/subsize[j]
+     ess_track_cc[i,j] = cover[[i]]$ESS[[5*(j-1) + 3]]/subsize[j]
+     ess_track_sve[i,j] = cover[[i]]$ESS[[5*(j-1) + 4]]/subsize[j]
+     ess_track_mls[i,j] = cover[[i]]$ESS[[5*(j-1) + 5]]/subsize[j]
+   }
+ }
> 
> se_ess_bm <- apply(ess_track_bm, 2, sd)/sqrt(B)
> se_ess_ise <- apply(ess_track_ise, 2, sd)/sqrt(B)
> se_ess_cc <- apply(ess_track_cc, 2, sd)/sqrt(B)
> se_ess_sve <- apply(ess_track_sve, 2, sd)/sqrt(B)
> se_ess_mls <- apply(ess_track_mls, 2, sd)/sqrt(B)
> 
> #subsize = log(subsize)/log(10)
> 
> 
> pdf("Plots/VAR_ess.pdf", height = 6, width = 6)
> par(mar = c(5.1, 4.8, 4.1, 2.1))
> plot(subsize, colMeans(ess_track_bm), type = "l", xlab = "Chain length",
+    ylim = c(0.020, 0.040), log = 'x',  ylab = "ESS/n")
> segments(x0 = subsize, y0 = colMeans(ess_track_bm) - 1.96*se_ess_bm, 
+   y1 = colMeans(ess_track_bm) + 1.96*se_ess_bm)
> 
> lines(subsize, colMeans(ess_track_ise), col = "red")
> segments(x0 = subsize, y0 = colMeans(ess_track_ise) - 1.96*se_ess_ise, 
+   y1 = colMeans(ess_track_ise) + 1.96*se_ess_bm, col = "red")
> 
> lines(subsize, colMeans(ess_track_cc), col = "purple")
> segments(x0 = subsize, y0 = colMeans(ess_track_cc) - 1.96*se_ess_cc, 
+   y1 = colMeans(ess_track_cc) + 1.96*se_ess_cc, col = "purple")
> 
> lines(subsize, colMeans(ess_track_sve), col = "skyblue")
> segments(x0 = subsize, y0 = colMeans(ess_track_sve) - 1.96*se_ess_sve, 
+   y1 = colMeans(ess_track_sve) + 1.96*se_ess_sve, col = "skyblue")
> 
> lines(subsize, colMeans(ess_track_mls), col = "brown")
> segments(x0 = subsize, y0 = colMeans(ess_track_mls) - 1.96*se_ess_mls, 
+   y1 = colMeans(ess_track_mls) + 1.96*se_ess_mls, col = "brown")
> abline(h = ess_true, lty = 2)
> legend("topright", bty = "n",legend = c("BM", "mISE", "SVE", "CC - ISE", "CC - MLS", "True"), 
+   col = c("black",  "red", "skyblue", "purple", "brown", "black"), lty = c(1,1,1,1,1,2), cex=0.65)
> 
> dev.off()
null device 
          1 
> 
> ############################################################
> ####Frobenius Norm Plot#################################### 
> source("Examples/VAR_1.01/VAR_func.R")
> source("Examples/VAR_1.01/Asymp_var.R")
> 
> load("Examples/VAR_1.01/Results/dat_matices.Rdata")
> 
> add_legend <- function(...) {
+   opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), 
+     mar=c(0, 0, 0, 0), new=TRUE)
+   on.exit(par(opar))
+   plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')
+   legend(...)
+ }
> 
> true_norm <- norm(true.sig.gen(p = p, omega = omega, phi = phi)$final.cov, type = "F")
> Truth <- true.sig.gen(p = p, omega = omega, phi = phi)$final.cov
> 
> nloops = length(subsize)
> 
> norm_track_bm = matrix(0, nrow = B, ncol = nloops)
> norm_track_ise = matrix(0, nrow = B, ncol = nloops)
> norm_track_cc = matrix(0, nrow = B, ncol = nloops)
> norm_track_sve = matrix(0, nrow = B, ncol = nloops)
> norm_track_mls = matrix(0, nrow = B, ncol = nloops)
> 
> se_norm_bm <- numeric(length(subsize))
> se_norm_ise <- numeric(length(subsize))
> se_norm_cc <- numeric(length(subsize))
> se_norm_sve <- numeric(length(subsize))
> se_norm_mls <- numeric(length(subsize))
> 
> for(i in 1:B){
+   for(j in 1:nloops){
+     norm_track_bm[i,j] = norm(Truth - cover[[i]]$estimates[[5*(j-1) + 1]], type = "F")/norm(Truth, type = "F")
+     norm_track_ise[i,j] = norm(Truth - cover[[i]]$estimates[[5*(j-1) + 2]], type = "F")/norm(Truth, type = "F")
+     norm_track_cc[i,j] = norm(Truth - cover[[i]]$estimates[[5*(j-1) + 3]], type = "F")/norm(Truth, type = "F")
+     norm_track_sve[i,j] = norm(Truth - cover[[i]]$estimates[[5*(j-1) + 4]], type = "F")/norm(Truth, type = "F")
+     norm_track_mls[i,j] = norm(Truth - cover[[i]]$estimates[[5*(j-1) + 5]], type = "F")/norm(Truth, type = "F")
+   }
+ }
> 
> se_norm_bm <- apply(norm_track_bm, 2, sd)/sqrt(B)
> se_norm_ise <- apply(norm_track_ise, 2, sd)/sqrt(B)
> se_norm_cc <- apply(norm_track_cc, 2, sd)/sqrt(B)
> se_norm_sve <- apply(norm_track_sve, 2, sd)/sqrt(B)
> se_norm_mls <- apply(norm_track_mls, 2, sd)/sqrt(B)
> 
> #subsize = log(subsize)/log(10)
> 
> 
> pdf("Plots/VAR_Frob.pdf", height = 6, width = 6)
> par(mar = c(5.1, 4.8, 4.1, 2.1))
> plot(subsize, colMeans(norm_track_bm), type = "l", xlab = "Chain length",
+   ylim = c(0, 0.6), log = 'x', ylab = "Relative Frobenius norm")
> segments(x0 = subsize, y0 = colMeans(norm_track_bm) - 1.96*se_norm_bm, 
+   y1 = colMeans(norm_track_bm) + 1.96*se_norm_bm)
> 
> lines(subsize, colMeans(norm_track_ise), col = "red")
> segments(x0 = subsize, y0 = colMeans(norm_track_ise) - 1.96*se_norm_ise, 
+   y1 = colMeans(norm_track_ise) + 1.96*se_norm_bm, col = "red")
> 
> lines(subsize, colMeans(norm_track_cc), col = "purple")
> segments(x0 = subsize, y0 = colMeans(norm_track_cc) - 1.96*se_norm_cc, 
+   y1 = colMeans(norm_track_cc) + 1.96*se_norm_cc, col = "purple")
> 
> lines(subsize, colMeans(norm_track_sve), col = "skyblue")
> segments(x0 = subsize, y0 = colMeans(norm_track_sve) - 1.96*se_norm_sve, 
+   y1 = colMeans(norm_track_sve) + 1.96*se_norm_sve, col = "skyblue")
> 
> lines(subsize, colMeans(norm_track_mls), col = "brown")
> segments(x0 = subsize, y0 = colMeans(norm_track_mls) - 1.96*se_norm_mls, 
+   y1 = colMeans(norm_track_mls) + 1.96*se_norm_mls, col = "brown")
> #abline(h = true_norm, lty = 2)
> legend("topright", bty = "n",legend = c("BM", "mISE", "SVE", "CC - ISE", "CC - MLS"), 
+   col = c("black",  "red", "skyblue", "purple", "brown"), lty = c(1,1,1,1,1), cex=0.75)
> 
> dev.off()
null device 
          1 
> 
> ############################################################
> ####Eigen values sup dif Plot################################ 
> source("Examples/VAR_1.01/VAR_func.R")
> source("Examples/VAR_1.01/Asymp_var.R")
> 
> load("Examples/VAR_1.01/Results/dat_matices.Rdata")
> 
> 
> add_legend <- function(...) {
+   opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), 
+     mar=c(0, 0, 0, 0), new=TRUE)
+   on.exit(par(opar))
+   plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')
+   legend(...)
+ }
> 
> truth <- true.sig.gen(p = p, omega = omega, phi = phi)$final.cov
> 
> nloops = length(subsize)
> 
> bias_track_bm = matrix(0, nrow = B, ncol = nloops)
> bias_track_ise = matrix(0, nrow = B, ncol = nloops)
> bias_track_cc = matrix(0, nrow = B, ncol = nloops)
> bias_track_sve = matrix(0, nrow = B, ncol = nloops)
> bias_track_mls = matrix(0, nrow = B, ncol = nloops)
> 
> se_bias_bm <- numeric(length(subsize))
> se_bias_ise <- numeric(length(subsize))
> se_bias_cc <- numeric(length(subsize))
> se_bias_sve <- numeric(length(subsize))
> se_bias_mls <- numeric(length(subsize))
> 
> for(i in 1:B){
+   for(j in 1:length(subsize)){
+     bias_track_bm[i,j] = max(abs(eigen(cover[[i]]$estimates[[5*(j-1) + 1]])$values - eigen(truth)$value))
+     bias_track_ise[i,j] = max(abs(eigen(cover[[i]]$estimates[[5*(j-1) + 2]])$values - eigen(truth)$values))
+     bias_track_cc[i,j] = max(abs(eigen(cover[[i]]$estimates[[5*(j-1) + 3]])$values - eigen(truth)$values))
+     bias_track_sve[i,j] = max(abs(eigen(cover[[i]]$estimates[[5*(j-1) + 4]])$values - eigen(truth)$values))
+     bias_track_mls[i,j] = max(abs(eigen(cover[[i]]$estimates[[5*(j-1) + 5]])$values - eigen(truth)$values))
+   }
+ }
> 
> se_bias_bm <- apply(bias_track_bm, 2, sd)/sqrt(B)
> se_bias_ise <- apply(bias_track_ise, 2, sd)/sqrt(B)
> se_bias_cc <- apply(bias_track_cc, 2, sd)/sqrt(B)
> se_bias_sve <- apply(bias_track_sve, 2, sd)/sqrt(B)
> se_bias_mls <- apply(bias_track_mls, 2, sd)/sqrt(B)
> 
> 
> #subsize = log(subsize)/log(10)
> 
> 
> pdf("Plots/VAR_eigen_bias.pdf", height = 6, width = 6)
> par(mar = c(5.1, 4.8, 4.1, 2.1))
> plot(subsize, colMeans(bias_track_bm), type = "l", xlab = "Chain length",
+   ylim = c(0, 6000), log = 'x', ylab = "Absolute max error of Eigen values")
> segments(x0 = subsize, y0 = colMeans(bias_track_bm) - 1.96*se_bias_bm, 
+   y1 = colMeans(bias_track_bm) + 1.96*se_bias_bm)
> 
> lines(subsize, colMeans(bias_track_ise), col = "red")
> segments(x0 = subsize, y0 = colMeans(bias_track_ise) - 1.96*se_bias_ise, 
+   y1 = colMeans(bias_track_ise) + 1.96*se_bias_bm, col = "red")
> 
> lines(subsize, colMeans(bias_track_cc), col = "purple")
> segments(x0 = subsize, y0 = colMeans(bias_track_cc) - 1.96*se_bias_cc, 
+   y1 = colMeans(bias_track_cc) + 1.96*se_bias_cc, col = "purple")
> 
> lines(subsize, colMeans(bias_track_sve), col = "skyblue")
> segments(x0 = subsize, y0 = colMeans(bias_track_sve) - 1.96*se_bias_sve, 
+   y1 = colMeans(bias_track_sve) + 1.96*se_bias_sve, col = "skyblue")
> 
> lines(subsize, colMeans(bias_track_mls), col = "brown")
> segments(x0 = subsize, y0 = colMeans(bias_track_mls) - 1.96*se_bias_mls, 
+   y1 = colMeans(bias_track_mls) + 1.96*se_bias_mls, col = "brown")
> 
> legend("topright", bty = "n",legend = c("BM", "mISE", "SVE", "CC - ISE", "CC - MLS"), 
+   col = c("black",  "red", "brown", "purple","skyblue"), lty = 1, cex=0.75)
> 
> dev.off()
null device 
          1 
> 
> 
> ############################################################
> ##Computational Time Plot#################################### 
> 
> source("Examples/VAR_1.01/VAR_func.R")
> source("Examples/VAR_1.01/Asymp_var.R")
> 
> load("Examples/VAR_1.01/Results/dat_matices.Rdata")
> 
> 
> add_legend <- function(...) {
+   opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), 
+     mar=c(0, 0, 0, 0), new=TRUE)
+   on.exit(par(opar))
+   plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')
+   legend(...)
+ }
> 
> truth <- true.sig.gen(p = p, omega = omega, phi = phi)
> 
> nloops = length(subsize)
> 
> 
> chart = matrix(0, nrow = length(subsize), ncol = 5)
> time = matrix(0, nrow = length(subsize), ncol = 5)
> 
> time_track_bm = matrix(0, nrow = B, ncol = nloops)
> time_track_ise = matrix(0, nrow = B, ncol = nloops)
> time_track_cc = matrix(0, nrow = B, ncol = nloops)
> time_track_sve = matrix(0, nrow = B, ncol = nloops)
> time_track_mls = matrix(0, nrow = B, ncol = nloops)
> 
> se_time_bm <- numeric(length(subsize))
> se_time_ise <- numeric(length(subsize))
> se_time_cc <- numeric(length(subsize))
> se_time_sve <- numeric(length(subsize))
> se_time_mls <- numeric(length(subsize))
> 
> for(i in 1:B){
+   chart = chart + (cover[[i]]$count_mat)/B
+   time = time + log(cover[[i]]$Time)/(log(10)*B)
+   for(j in 1:length(subsize)){
+     time_track_bm[i,j] = cover[[i]]$Time[j,1]
+     time_track_ise[i,j] = cover[[i]]$Time[j,2]
+     time_track_cc[i,j] = cover[[i]]$Time[j,3]
+     time_track_sve[i,j] = cover[[i]]$Time[j,4]
+     time_track_mls[i,j] = cover[[i]]$Time[j,5]
+   }
+ }
> 
> se_time_bm <- apply(time_track_bm, 2, sd)/sqrt(B)
> se_time_ise <- apply(time_track_ise, 2, sd)/sqrt(B)
> se_time_cc <- apply(time_track_cc, 2, sd)/sqrt(B)
> se_time_sve <- apply(time_track_sve, 2, sd)/sqrt(B)
> se_time_mls <- apply(time_track_mls, 2, sd)/sqrt(B)
> chart;time
         BM   ISE New ISE (Geyer)   SVE New ISE (MLS)
5000  0.436 0.613           0.704 0.535         0.611
8000  0.594 0.715           0.832 0.667         0.761
10000 0.661 0.776           0.869 0.744         0.821
30000 0.822 0.875           0.943 0.868         0.915
50000 0.865 0.913           0.960 0.905         0.949
80000 0.884 0.915           0.959 0.907         0.946
1e+05 0.892 0.913           0.953 0.910         0.945
3e+05 0.913 0.927           0.952 0.923         0.938
5e+05 0.924 0.937           0.961 0.933         0.949
            [,1]       [,2]       [,3]        [,4]       [,5]
 [1,] -2.0907555 -0.7700876 -1.6091087 -1.76677989 0.09215394
 [2,] -2.0091427 -0.4739837 -1.4523217 -1.62383111 0.10574681
 [3,] -1.9517689 -0.3340704 -1.3793013 -1.54128426 0.11530485
 [4,] -1.5980344  0.3147007 -0.9204954 -1.09615852 0.20414817
 [5,] -1.4053472  0.6065774 -0.6562340 -0.85424476 0.28237698
 [6,] -1.3415588  0.8646050 -0.4516272 -0.57012975 0.37872563
 [7,] -1.3093697  0.9866084 -0.3397413 -0.49762297 0.44231206
 [8,] -1.0579157  1.5709381  0.3261352  0.09525751 0.92134792
 [9,] -0.9001876  1.8356158  0.5870619  0.33309914 1.18241720
> 
> 
> 
> 
> add_legend <- function(...) {
+   opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), 
+     mar=c(0, 0, 0, 0), new=TRUE)
+   on.exit(par(opar))
+   plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')
+   legend(...)
+ }
> 
> #subsize = log(subsize)/log(10)
> 
> pdf("Plots/VAR_comptime.pdf", height = 6, width = 6)
> par(mar = c(5.1, 4.8, 4.1, 2.1))
> plot(subsize, colMeans(time_track_bm), type = "l", xlab = "Chain length",
+   ylim = c(0, 80), log = 'x', ylab = "Computational Time (sec)")
> segments(x0 = subsize, y0 = colMeans(time_track_bm) - 1.96*se_time_bm, 
+   y1 = colMeans(time_track_bm) + 1.96*se_time_bm)
> 
> lines(subsize, colMeans(time_track_ise), col = "red")
> segments(x0 = subsize, y0 = colMeans(time_track_ise) - 1.96*se_time_ise, 
+   y1 = colMeans(time_track_ise) + 1.96*se_time_bm, col = "red")
> 
> lines(subsize, colMeans(time_track_cc), col = "purple")
> segments(x0 = subsize, y0 = colMeans(time_track_cc) - 1.96*se_time_cc, 
+   y1 = colMeans(time_track_cc) + 1.96*se_time_cc, col = "purple")
> 
> lines(subsize, colMeans(time_track_sve), col = "skyblue")
> segments(x0 = subsize, y0 = colMeans(time_track_sve) - 1.96*se_time_sve, 
+   y1 = colMeans(time_track_sve) + 1.96*se_time_sve, col = "skyblue")
> 
> lines(subsize, colMeans(time_track_mls), col = "brown")
> segments(x0 = subsize, y0 = colMeans(time_track_mls) - 1.96*se_time_mls, 
+   y1 = colMeans(time_track_mls) + 1.96*se_time_mls, col = "brown")
> 
> legend("topleft", bty = "n",legend = c("BM", "mISE",  "SVE", "CC - ISE", "CC - MLS"), 
+   col = c("black",  "red",  "skyblue","purple","brown"), lty = 1, cex=0.75)
> 
> dev.off()
null device 
          1 
> 
> 
> 
> ############################################################
> ##Computational Time Plot#################################### 
> 
> source("Examples/VAR_1.01/VAR_func.R")
> source("Examples/VAR_1.01/Asymp_var.R")
> 
> load("Examples/VAR_1.01/Results/dat_matices.Rdata")
> 
> library(latex2exp)
> 
> nloops = length(subsize)
> 
> add_legend <- function(...) {
+   opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), 
+     mar=c(0, 0, 0, 0), new=TRUE)
+   on.exit(par(opar))
+   plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')
+   legend(...)
+ }
> 
> Trunc_ise = matrix(0, nrow = B, ncol = nloops)
> Trunc_cc = matrix(0, nrow = B, ncol = nloops)
> 
> for(i in 1:B){
+   for(j in 1:nloops){
+     Trunc_ise[i,j] = (cover[[i]]$Truncation[j,1])
+     Trunc_cc[i,j] = log(subsize[j])
+     #Trunc_ise[i,j] = subsize[j]*(cover[[i]]$Truncation[j,1])*(p*p)
+     #Trunc_cc[i,j] = subsize[j]*log(subsize[j])*p
+   }
+ }
> 
> Trunc_ise = cbind(rep(0, B), Trunc_ise)
> subsize = c(1, subsize)
> 
> se_ise <- apply(Trunc_ise, 2, sd)/sqrt(B)
> se_cc <- apply(Trunc_cc, 2, sd)/sqrt(B)
> 
> 
> pdf("Plots/VAR_theoretical_complexity.pdf", height = 6, width = 6)
> par(mar = c(5.1, 4.8, 4.1, 2.1))
> 
> curve(log(x), from = 1, to = 5e5, lty = 2, col = "black", xlab = "Chain length",
+      ylim = c(0, 130), xlim = c(0, 5e5), ylab = TeX(r'($t_{n}$)'), lwd = 2)
> 
> lines(subsize, colMeans(Trunc_ise), type = "l", col = "red")
> segments(x0 = subsize, y0 = colMeans(Trunc_ise) - 1.96*se_ise, 
+   y1 = colMeans(Trunc_ise) + 1.96*se_ise, col = "red")
> 
> 
> #lines(subsize, colMeans(Trunc_cc), type = "l", xlab = "Chain length",
> #   ylab = "Theoretical Time/(n d)", col = "purple")
> #segments(x0 = subsize, y0 = colMeans(Trunc_cc) - 1.96*se_cc, 
> #  y1 = colMeans(Trunc_cc) + 1.96*se_cc, col = "purple")
> 
> legend("topleft", bty = "n",legend = c(TeX(r'($t_{n}$ (mISE))'), TeX(r'($\log [n]$)')), 
+   col = c("red", "black"), lty = c(1, 2), lwd = c(1, 2), cex= 1.2)
> 
> 
> dev.off()
null device 
          1 
> 
> #################################################
> rm()
> ################################################# Calcium Example
> 
> load("Examples/Spike_train/Results/Output_d.Rdata")
> 
> add_legend <- function(...) {
+   opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), 
+     mar=c(0, 0, 0, 0), new=TRUE)
+   on.exit(par(opar))
+   plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')
+   legend(...)
+ }
> 
> bm_time = matrix(0, nrow = repet, ncol = length(N))
> ise_time = matrix(0, nrow = repet, ncol = length(N))
> sve_time = matrix(0, nrow = repet, ncol = length(N))
> cc_time = matrix(0, nrow = repet, ncol = length(N))
> mls_time = matrix(0, nrow = repet, ncol = length(N))
> 
> 
> for(i in 1:repet){
+   bm_time[i,] = as.numeric(Table[[i]][[2]][[1]])
+   ise_time[i,] = as.numeric(Table[[i]][[2]][[2]])
+   sve_time[i,] = as.numeric(Table[[i]][[2]][[3]])
+   cc_time[i,] = as.numeric(Table[[i]][[2]][[4]])
+   mls_time[i,] = as.numeric(Table[[i]][[2]][[5]])
+ }
> 
> se_time_bm <- apply(bm_time, 2, sd)/sqrt(repet)
> se_time_ise <- apply(ise_time, 2, sd)/sqrt(repet)
> se_time_cc <- apply(cc_time, 2, sd)/sqrt(repet)
> se_time_sve <- apply(sve_time, 2, sd)/sqrt(repet)
> se_time_mls <- apply(mls_time, 2, sd)/sqrt(repet)
> 
> #N = log(N)/log(10)
> 
> 
> pdf("Plots/Calcium_spike_comptime.pdf", height = 6, width = 6)
> par(mfrow = c(1,1))
> plot(N, colMeans(bm_time),col = "black", xlab = "Chain Length", ylab = "Computational time (sec)", 
+   ylim = c(0, 300), log = 'x', type = "l")
> segments(x0 = N, y0 = colMeans(bm_time) - 1.96*se_time_bm, 
+   y1 = colMeans(bm_time) + 1.96*se_time_bm)
> 
> lines(N, colMeans(sve_time), col = "skyblue", lty = 1)
> segments(x0 = N, y0 = colMeans(sve_time) - 1.96*se_time_sve, 
+   y1 = colMeans(sve_time) + 1.96*se_time_sve, col = "skyblue")
> 
> lines(N, colMeans(cc_time), col = "purple", lty = 1)
> segments(x0 = N, y0 = colMeans(cc_time) - 1.96*se_time_cc, 
+   y1 = colMeans(cc_time) + 1.96*se_time_cc, col = "purple")
> 
> lines(N, colMeans(ise_time), col = "red", lty = 1)
> segments(x0 = N, y0 = colMeans(ise_time) - 1.96*se_time_ise, 
+   y1 = colMeans(ise_time) + 1.96*se_time_ise, col = "red")
> 
> lines(N, colMeans(mls_time), col = "brown", lty = 1)
> segments(x0 = N, y0 = colMeans(mls_time) - 1.96*se_time_mls, 
+   y1 = colMeans(mls_time) + 1.96*se_time_mls, col = "brown")
> 
> legend("topleft",legend = c("BM", "SVE",  "mISE", "CC - ISE","CC - MLS"),
+  col = c("black", "skyblue",  "red", "purple","brown"), cex = 0.8,lty = 1)
> dev.off()
null device 
          1 
> 
> #####################################################################
> ###### ESS Plot #####################################################
> 
> load("Examples/Spike_train/Results/Output_d.Rdata")
> 
> add_legend <- function(...) {
+   opar <- par(fig=c(0, 1, 0, 1), oma=c(0, 0, 0, 0), 
+     mar=c(0, 0, 0, 0), new=TRUE)
+   on.exit(par(opar))
+   plot(0, 0, type='n', bty='n', xaxt='n', yaxt='n')
+   legend(...)
+ }
> 
> p = dim(Table[[1]][[1]][[1]])[1]
> 
> bm_ess = matrix(0, nrow = repet, ncol = length(N))
> ise_ess = matrix(0, nrow = repet, ncol = length(N))
> sve_ess = matrix(0, nrow = repet, ncol = length(N))
> cc_ess = matrix(0, nrow = repet, ncol = length(N))
> mls_ess = matrix(0, nrow = repet, ncol = length(N))
> 
> for(i in 1:repet){
+   for(j in 1:length(N)){
+     bm_ess[i,j] = (det(Table[[i]][[1]][[6*(j-1) + 1]])/det(Table[[i]][[1]][[6*(j-1) + 2]]))^(1/p)
+     ise_ess[i,j] = (det(Table[[i]][[1]][[6*(j-1) + 1]])/det(Table[[i]][[1]][[6*(j-1) + 3]]))^(1/p)
+     sve_ess[i,j] = (det(Table[[i]][[1]][[6*(j-1) + 1]])/det(Table[[i]][[1]][[6*(j-1) + 4]]))^(1/p)
+     cc_ess[i,j] = (det(Table[[i]][[1]][[6*(j-1) + 1]])/det(Table[[i]][[1]][[6*(j-1) + 5]]))^(1/p)
+     mls_ess[i,j] = (det(Table[[i]][[1]][[6*(j-1) + 1]])/det(Table[[i]][[1]][[6*(j-1) + 6]]))^(1/p)
+   }
+ }
> 
> 
> se_ess_bm <- apply(bm_ess, 2, sd)/sqrt(repet)
> se_ess_sve <- apply(ise_ess, 2, sd)/sqrt(repet)
> se_ess_cc <- apply(cc_ess, 2, sd)/sqrt(repet)
> se_ess_ise <- apply(sve_ess, 2, sd)/sqrt(repet)
> se_ess_mls <- apply(mls_ess, 2, sd)/sqrt(repet)
> 
> #N = log(N)/log(10)
> 
> pdf("Plots/Calcium_spike_ess.pdf", height = 6, width = 6)
> par(mfrow = c(1,1))
> plot(N, colMeans(bm_ess),col = "black", xlab = "Chain Length", ylab = "ESS/n", 
+   ylim = c(0.035, 0.075), log = 'x', type = "l")
> segments(x0 = N, y0 = colMeans(bm_ess) - 1.96*se_ess_bm, 
+   y1 = colMeans(bm_ess) + 1.96*se_ess_bm)
> 
> lines(N, colMeans(sve_ess), col = "skyblue", lty = 1)
> segments(x0 = N, y0 = colMeans(sve_ess) - 1.96*se_ess_sve, 
+   y1 = colMeans(sve_ess) + 1.96*se_ess_sve, col = "skyblue")
> 
> lines(N, colMeans(cc_ess), col = "purple", lty = 1)
> segments(x0 = N, y0 = colMeans(cc_ess) - 1.96*se_ess_cc, 
+   y1 = colMeans(cc_ess) + 1.96*se_ess_cc, col = "purple")
> 
> lines(N, colMeans(ise_ess), col = "red", lty = 1)
> segments(x0 = N, y0 = colMeans(ise_ess) - 1.96*se_ess_ise, 
+   y1 = colMeans(ise_ess) + 1.96*se_ess_ise, col = "red")
> 
> lines(N, colMeans(mls_ess), col = "brown", lty = 1)
> segments(x0 = N, y0 = colMeans(mls_ess) - 1.96*se_ess_mls, 
+   y1 = colMeans(mls_ess) + 1.96*se_ess_mls, col = "brown")
> 
> #abline(h = 0, lty = 2)
> legend("topright",legend = c("BM", "SVE", "mISE", "CC - ISE", "CC - MLS"),
+  col = c("black", "skyblue", "red", "purple", "brown"), cex = 0.8,lty = 1)
> dev.off()
null device 
          1 
> 
> 
> #################################################
> rm()
> ################################################# Parallel Chain Example
> 
> set.seed(100)
> 
> source("Examples/Parallel_chain/Asymp_var.R")
> source("Examples/Parallel_chain/VAR_func.R")
> source("Examples/Parallel_chain/global_var.R")
> source("Examples/Parallel_chain/Stan_code.R")
> 
> 
> load("Examples/Parallel_chain/Results/parallel_est.Rdata")
> 
> ############################################
> ################## ESS #####################
> 
> 
> ess_true <- (det(true.sig.gen(p = p, omega = omega, phi = phi)$tar.var)/det(true.sig.gen(p = p, omega = omega, phi = phi)$final.cov))^(1/p)
> ess_true
[1] 0.02630116
> 
> 
> ess_track_glob = array(0, dim = c(B, length(subsize), length(M)))
> ess_track_stan = array(0, dim = c(B, length(subsize), length(M)))
> 
> for(i in 1:B){
+   for(j in 1:length(subsize)){
+     for(k in 1:length(M)){
+       ess_track_glob[i,j,k] = (det(Estimate[[i]][[j]][[3]][[k]])/det(Estimate[[i]][[j]][[1]][[k]]))^(1/p)
+       ess_track_stan[i,j,k] = (det(Estimate[[i]][[j]][[3]][[k]])/det(Estimate[[i]][[j]][[2]][[k]]))^(1/p)
+     }
+   }
+ }
> 
> 
> 
> mean_ess_glob = numeric(0)
> mean_ess_stan = numeric(0)
> 
> sd_ess_glob = numeric(0)
> sd_ess_stan = numeric(0)
> 
> for(i in 1:length(M)){
+   mean_ess_glob[i] = mean(ess_track_glob[,5,i])
+   sd_ess_glob[i] = sd(ess_track_glob[,5,i])
+   mean_ess_stan[i] = mean(ess_track_stan[,5,i])
+   sd_ess_stan[i] = sd(ess_track_stan[,5,i])
+ 
+ }
> 
> 
> final_mat_ess = matrix(c(mean_ess_glob, mean_ess_stan), byrow = TRUE, nrow = 2)
> rownames(final_mat_ess) = c("Globally Centered", "STAN")
> colnames(final_mat_ess) = c("M = 2", "M = 4", "M = 8", "M = 16")
> final_mat_ess
                       M = 2      M = 4      M = 8     M = 16
Globally Centered 0.02311039 0.02284478 0.02293454 0.02289444
STAN              0.02322306 0.02300384 0.02313355 0.02310465
> 
> sd_mat_ess = matrix(c(sd_ess_glob, sd_ess_stan), byrow = TRUE, nrow = 2)
> rownames(sd_mat_ess) = c("Globally Centered", "STAN")
> colnames(sd_mat_ess) = c("M = 2", "M = 4", "M = 8", "M = 16")
> sd_mat_ess
                         M = 2        M = 4        M = 8       M = 16
Globally Centered 0.0009300502 0.0007446004 0.0006091011 0.0004576476
STAN              0.0009637428 0.0007801028 0.0006237732 0.0004724741
> 
> 
> ############################################
> ################## Frob #####################
> 
> Truth = true.sig.gen(p = p, omega = omega, phi = phi)$final.cov
> 
> frob_track_glob = array(0, dim = c(B, length(subsize), length(M)))
> frob_track_stan = array(0, dim = c(B, length(subsize), length(M)))
> 
> for(i in 1:B){
+   for(j in 1:length(subsize)){
+     for(k in 1:length(M)){
+       frob_track_glob[i,j,k] = norm(Truth - Estimate[[i]][[j]][[1]][[k]], type = "F")/norm(Truth, type = "F")
+       frob_track_stan[i,j,k] = norm(Truth - Estimate[[i]][[j]][[2]][[k]], type = "F")/norm(Truth, type = "F")
+     }
+   }
+ }
> 
> 
> 
> mean_frob_glob = numeric(0)
> mean_frob_stan = numeric(0)
> 
> sd_frob_glob = numeric(0)
> sd_frob_stan = numeric(0)
> 
> for(i in 1:length(M)){
+   mean_frob_glob[i] = mean(frob_track_glob[,5,i])
+   sd_frob_glob[i] = sd(frob_track_glob[,5,i])
+   mean_frob_stan[i] = mean(frob_track_stan[,5,i])
+   sd_frob_stan[i] = sd(frob_track_stan[,5,i])
+ 
+ }
> 
> 
> final_mat_frob = matrix(c(mean_frob_glob, mean_frob_stan), byrow = TRUE, nrow = 2)
> rownames(final_mat_frob) = c("Globally Centered", "STAN")
> colnames(final_mat_frob) = c("M = 2", "M = 4", "M = 8", "M = 16")
> final_mat_frob
                      M = 2      M = 4      M = 8     M = 16
Globally Centered 0.1126021 0.09080698 0.07625350 0.06828241
STAN              0.1150659 0.09304085 0.07953944 0.07253975
> 
> sd_mat_frob = matrix(c(sd_frob_glob, sd_frob_stan), byrow = TRUE, nrow = 2)
> rownames(sd_mat_frob) = c("Globally Centered", "STAN")
> colnames(sd_mat_frob) = c("M = 2", "M = 4", "M = 8", "M = 16")
> sd_mat_frob
                       M = 2      M = 4      M = 8     M = 16
Globally Centered 0.03561802 0.02611521 0.02413802 0.02002998
STAN              0.03552863 0.02704541 0.02577667 0.02161270
> 
> #################### boxplot ##############
> ####### n = 1e5
> 
> df = data.frame(
+   id = c(rep("global", B), rep("stan", B)),
+   "2" = c(frob_track_glob[,5,1], frob_track_stan[,5,1]),
+   "4" = c(frob_track_glob[,5,2], frob_track_stan[,5,2]),
+   "8" = c(frob_track_glob[,5,3], frob_track_stan[,5,3]),
+   "16" = c(frob_track_glob[,5,4], frob_track_stan[,5,4]))
> 
> 
> pdf("Plots/Boxplot_frob_1e5.pdf", height = 6, width = 6)
> par(mar = c(5.1, 4.8, 4.1, 2.1))
> 
> boxplot(df[,-1], boxfill = NA, border = NA, names = M, xlab = "Number of parallel chains (n = 1e5)", 
+   ylab = "Relative Frobenius Norm", ylim = c(0, 0.3)) #invisible boxes - only axes and plot area
> boxplot(df[df$id=="global", -1], xaxt = "n", add = TRUE, boxfill="cadetblue1", 
+   boxwex=0.25, at = 1:ncol(df[,-1]) - 0.15) #shift these left by -0.15
> boxplot(df[df$id=="stan", -1], xaxt = "n", add = TRUE, boxfill="firebrick1", 
+   boxwex=0.25, at = 1:ncol(df[,-1]) + 0.15) #shift to the right by +0.15
> legend("topright", legend = c("Globally Centered", "STAN"), 
+        fill = c("cadetblue1", "firebrick1"), border = "black")
> dev.off()
null device 
          1 
> 
> 
> #################### boxplot ##############
> ####### n = 1e4
> 
> df = data.frame(
+   id = c(rep("global", B), rep("stan", B)),
+   "2" = c(frob_track_glob[,1,1], frob_track_stan[,1,1]),
+   "4" = c(frob_track_glob[,1,2], frob_track_stan[,1,2]),
+   "8" = c(frob_track_glob[,1,3], frob_track_stan[,1,3]),
+   "16" = c(frob_track_glob[,1,4], frob_track_stan[,1,4]))
> 
> 
> pdf("Plots/Boxplot_frob_1e3.pdf", height = 6, width = 6)
> par(mar = c(5.1, 4.8, 4.1, 2.1))
> 
> boxplot(df[,-1], boxfill = NA, border = NA, names = M, xlab = "Number of parallel chains (n = 1e3)", 
+   ylab = "Relative Frobenius Norm", ylim = c(0, 4.5)) #invisible boxes - only axes and plot area
> boxplot(df[df$id=="global", -1], xaxt = "n", add = TRUE, boxfill="cadetblue1", 
+   boxwex=0.25, at = 1:ncol(df[,-1]) - 0.15) #shift these left by -0.15
> boxplot(df[df$id=="stan", -1], xaxt = "n", add = TRUE, boxfill="firebrick1", 
+   boxwex=0.25, at = 1:ncol(df[,-1]) + 0.15) #shift to the right by +0.15
> legend("topright", legend = c("Globally Centered", "STAN"), 
+        fill = c("cadetblue1", "firebrick1"), border = "black")
> dev.off()
null device 
          1 
> 
> 
> proc.time()
   user  system elapsed 
 11.660   0.219  11.983 
